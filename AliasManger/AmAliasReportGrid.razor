@using AliasManger.Internal.AliasDetails

@if (_loadingStatus == 0)
{
    <p><em>Loading...</em></p>
}

@if (_loadingStatus == 1)
{

    <SfGrid DataSource="@AliasReportList" AllowResizing="false" AllowSorting="true" AllowPaging="true" AllowTextWrap="true" AllowExcelExport="true">        
        <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
        <GridPageSettings PageSize="20"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(AmAliasReport.aliasID) HeaderText="@AmLocalizer.GetText("AliasList_Content_Column_Id")" Width="60">
                <Template>
                    @{
                        var rep = (context as AmAliasReport);
                        <div>                            
                             <div class="alink" @onclick="@(() => ShowAliasInfo(rep.aliasID))"><span class="oi oi-zoom-in"></span> @rep.aliasID</div>
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(AmAliasReport.LicName) HeaderText="@AmLocalizer.GetText("AliasList_Content_Column_LicName")" Width="150">
                <Template>
                    @{
                        var rep = (context as AmAliasReport);
                        if (String.IsNullOrEmpty(rep.LicName))
                        {
                            <div>@AmLocalizer.GetText("AliasFilter_License_Uebergreifend")</div>
                        }
                        else
                        {
                            <div>@rep.LicName</div>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(AmAliasReport.hcmProfilName) HeaderText="@AmLocalizer.GetText("AliasList_Content_Column_HCMProfile")" Width="150"></GridColumn>

            <GridColumn Field=@nameof(AmAliasReport.aliasName) HeaderText="@AmLocalizer.GetText("AliasList_Content_Column_Name")" Width="200"></GridColumn>
            <GridColumn Field=@nameof(AmAliasReport.aliasAddress) HeaderText="@AmLocalizer.GetText("AliasList_Content_Column_Street")" Width="200"></GridColumn>
            <GridColumn Field=@nameof(AmAliasReport.Acepted) HeaderText="@AmLocalizer.GetText("AliasList_Content_Column_Accepted")" Width="80"></GridColumn>
            <GridColumn Field=@nameof(AmAliasReport.Ignored) HeaderText="@AmLocalizer.GetText("AliasList_Content_Column_Ignored")" Width="80"></GridColumn>

        </GridColumns>
    </SfGrid>
}

@if (_showAliasInfoPopUp)
{
    <CascadingValue Value="@CurrentUserLogin" Name="CurrentUserLogin">
    <CascadingValue Value="@VgsAccountId" Name="VgsAccountId">
    <CascadingValue Value="@AllowActions" Name="AllowActions">
    <CascadingValue Value="@AllowAuthorization" Name="AllowAuthorization">
        <AliasInfoPopUp @bind-ShowModal="_showAliasInfoPopUp" AliasId="_currentAliasId"></AliasInfoPopUp> 
    </CascadingValue>
    </CascadingValue>
    </CascadingValue>
    </CascadingValue>
}

@code {

    [Inject] private IAliasManager AliasService { get; set; }
    [Inject] private IAliasManagerLocalizer AmLocalizer { get; set; }
    [Inject] private ILogger<AmAliasReportGrid> _logger { get; set; }

    [Parameter] public string CurrentUserLogin { get; set; }
    [Parameter] public string VgsAccountId { get; set; }    
    [Parameter] public AmAliasFilter InputFilter { get; set; }    
    [Parameter] public bool AllowActions { get; set; }
    [Parameter] public bool AllowAuthorization { get; set; }


    protected List<AmAliasReport> AliasReportList { get; set; }
    protected int _loadingStatus { get; set; }


    private AmAliasFilter _inputFilter { get; set; }
    private int _currentAliasId { get; set; }
    private bool _showAliasInfoPopUp { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        try
        {
            _loadingStatus = 0;
            if (!ObjHelper.JsonCompare(_inputFilter, InputFilter))
            {
                _inputFilter = ObjHelper.Clone(InputFilter);
                await LoadAliasReportList();
            }
            _loadingStatus = 1;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);

            _loadingStatus = 2;
        }
    }

    public async Task LoadAliasReportList()
    {       
        AliasReportList = await AliasService.ReportGetByFilterAsync(_inputFilter.Von, _inputFilter.Bis, _inputFilter.AllTime,
            _inputFilter.Name, _inputFilter.Street,_inputFilter.LicenseId, VgsAccountId);
             
    }

    private void ShowAliasInfo(int aliasId)
    {
        _currentAliasId = aliasId;
        _showAliasInfoPopUp = true;
    }
}

