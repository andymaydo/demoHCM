@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons

@if (ShowModal)
{
    <SfDialog Width="750px" ShowCloseIcon="true" IsModal="true" AllowDragging="false" EnableResize="false" @bind-Visible="ShowModal">
        <DialogEvents OnClose="@CloseDialog"></DialogEvents>
        <DialogTemplates>
            <Header>
                <div class="am-dlg-header">@AmLocalizer.GetText("AliasInfo_Dialog_Header")</div>
            </Header>

            <Content>

                    <CascadingValue Value="@Item">

                        <SfTab LoadOn="ContentLoad.Dynamic" CssClass="e-small">
                            <TabItems>
                                <TabItem>
                                    <HeaderTemplate>@AmLocalizer.GetText("AliasInfo_Tab0_Header")</HeaderTemplate>
                                    <ContentTemplate>
                                        <AliasDetails OnAliasStatusChange="@(async() => await LoadItem())" />
                                    </ContentTemplate>
                                </TabItem>
                                <TabItem>
                                    <HeaderTemplate>@AmLocalizer.GetText("AliasInfo_Tab1_Header")</HeaderTemplate>
                                    <ContentTemplate>
                                        <AliasHistory />
                                    </ContentTemplate>
                                </TabItem>
                            </TabItems>
                        </SfTab>

                    </CascadingValue>
 
            </Content>

        </DialogTemplates>

    </SfDialog>
}

@code {

    [Inject] private IAliasManager AliasService { get; set; }
    [Inject] private IAliasManagerLocalizer AmLocalizer { get; set; }
    [Inject] private ILogger<AliasInfoPopUp> _logger { get; set; }

    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public EventCallback<bool> ShowModalChanged { get; set; }
    [Parameter] public EventCallback OnDialogClosed { get; set; }
    [Parameter] public int AliasId { get; set; } 

    protected AmAlias Item { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadItem();

    }

    public async Task LoadItem()
    {
        try
        {
            Item = await AliasService.GetByIdAsync(AliasId);
        }
        catch (Exception ex)
        {
            _logger.LogDebug(ex, ex.StackTrace);
            _logger.LogError(ex.Message);
        }
    }

    public async Task CloseDialog()
    {
        ShowModal = false;
        await ShowModalChanged.InvokeAsync(ShowModal);
        await OnDialogClosed.InvokeAsync();           
    }
   
}
