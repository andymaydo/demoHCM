                 
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Logging
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Lists
@using System.Security.Claims
@using HCMApi
@using HCMApi.Models
@using System.Globalization
@using AutoMapper
@using HCM.Pages.cases.DetailPage.Shared
@using System.IO
@using System.Xml
@using static HCMModels.CaseModel


@if (ShowModal)
{
    <SfDialog Width="950px" ShowCloseIcon="true" IsModal="true" AllowDragging="true" EnableResize="false" @bind-Visible="@ShowModal">
        <DialogEvents OnClose="@CloseDialog" ></DialogEvents>
        <DialogTemplates>
            <Header><div class="tLabel">@Localizer.Str["Cases_ChangeStatus_Title"]</div></Header>
            <Content>
                @if (_loadingStatus == 0)
                {
                    <p><em>Loading...</em></p>
                }
                @if (_loadingStatus == 1)
                {
                    <div class="mx-4">
                         <EditForm Model="@FormModel" OnValidSubmit="@ValidFormSubmited" >
                            <DataAnnotationsValidator />
                            <div class="row gy-3">
                                <div class="row col-md-7 gy-3">      
                                    <div class="col-12">
                                        <label class="tLabel">@Localizer.Str["Cases_ChangeStatus_Subject"]</label>
                                        <hr class="mb-2"/>
                                        <div>@FormModel.CaseSubject</div>
                                    </div>
                                    <div class="col-12">
                                        <label class="tLabel2">@Localizer.Str["Cases_Detail_Label_Status"]</label>
                                        <div>@Localizer.Str["Case_Status_" + @FormModel.CurrentStatusId.ToString()]</div>
                                    </div>
                                    <div class="col-12">
                                        <label class="tLabel2">@Localizer.Str["Cases_ChangeStatus_SelectStatus"]</label>                                    
                                        <SfComboBox TValue="string" TItem="CaseEventStatus" DataSource="@StatusList" @bind-Value="@FormModel.NewStatusId"
                                            Placeholder="@Localizer.Str["Value_Select_Text"]">
                                            <ComboBoxFieldSettings Text="EventText" Value="EventID"></ComboBoxFieldSettings>
                                        </SfComboBox>      
                                        <ValidationMessage For="@(() => FormModel.NewStatusId)" />
                                    </div>

                                    <div class="col-12">
                                        <label class="tLabel2">@Localizer.Str["Cases_ChangeStatus_Note"]</label>
                                        <SfTextBox HtmlAttributes="@htmlAttribute" Multiline="true"  @bind-Value="@FormModel.Note"></SfTextBox>
                                        <ValidationMessage For="@(() => FormModel.Note)" />
                                        <SfCheckBox @bind-Checked="@FormModel.WithMatchReport" Label="@Localizer.Str["Cases_AddMessage_AddReport"]"></SfCheckBox>
                                    </div>                                
                                </div>

                                <div class="col-md-1">                           
                                </div>

                                <div class="row col-md-4 gy-3">
                                

                                    <div class="col-12">
                                        <label class="tLabel">@Localizer.Str["Cases_AddMessage_NotifyUsers"]</label>
                                        <hr class="mb-2"/>
                                        <SfCheckBox @bind-Checked="@FormModel.NotifyAll" @onchange="NotifyAllOnChange" Label="@Localizer.Str["Value_All_Text"]"></SfCheckBox>
                                    </div>

                                    <div class="col-12">
                                        <CaseContactPan Source="@FormModel.ProfileParticipants" ShowCheckBox="true" CheckBoxDisabled="@ProfileModel.NotifyAllProfileParticipants" ShowStriped="true" 
                                            Title="@Localizer.Str["Cases_Detail_Label_ProfileUsers"]"></CaseContactPan>
                                    </div>

                                    <div class="col-12">
                                        <CaseContactPan Source="@FormModel.CaseParticipants" ShowCheckBox="true" ShowStriped="true" 
                                            Title="@Localizer.Str["Cases_Detail_Label_Users"]"></CaseContactPan>
                                    </div>

                                    <div class="col-12">
                                        <CaseOriginatorPan Source="FormModel.Originator" ShowCheckBox="true"></CaseOriginatorPan>
                                    </div>                                 
                                </div>  
                                
                                <div class="col-md-12">
                                    <hr class="mt-4 mb-2"/>
                                    <SfButton Type="submit" IsPrimary="true"  Content="@Localizer.Str["Button_Save"]"></SfButton>                        
                                </div>
                            </div>
                        
                            
                         </EditForm>
                    </div>

                    <UiMessageBox Data="Messages.List" />
                }
            </Content>
        </DialogTemplates>
    </SfDialog>

}




@code {
    [Inject] private ILogger<AddNotePopUp> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private IMapper _mapper { get; set; }
    [Inject] public ICMSAPI CmsService{ get; set; }


    [CascadingParameter(Name = "CurrentContactId")] protected int CurrentContactId { get; set; }
    [Parameter] public Case CaseModel { get; set; }
    [Parameter] public CMSProfileModel ProfileModel { get; set; }
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public EventCallback<bool> ShowModalChanged { get; set; }
    [Parameter] public EventCallback OnFormSaved { get; set; }


    protected ChangeStatusForm FormModel { get; set; }
    protected List<CaseEventStatus> StatusList { get; set; }
    protected CaseDocs CaseDocs { get; set; }
    protected UiMessages Messages { get; set; }
    private int _loadingStatus;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Messages = new UiMessages();
        FormModel = new ChangeStatusForm();
        CaseDocs = new CaseDocs();

        _loadingStatus = 0;

        try
        {
            if(CaseModel == null )
            {               
                throw new ArgumentNullException("CaseModel");
            }
            if(ProfileModel == null )
            {               
                throw new ArgumentNullException("ProfileModel");
            }

            await InitFormModel();

            _loadingStatus = 1;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

            _loadingStatus = 2;
        }
    }


    public async Task CloseDialog()
    {
        ShowModal = false;
        await ShowModalChanged.InvokeAsync(ShowModal);
    }


    protected async Task ValidFormSubmited()
    {
        try
        {
            Messages.List.Clear();

            var notifyList = GetNotifyList();
            var docsXML = GetAttachedDocs();
                      
            await CmsService.OnEvent(FormModel.NewStatusId, CurrentContactId, CaseModel.CaseID, docsXML, FormModel.Note, notifyList);


            await OnFormSaved.InvokeAsync();
            await CloseDialog();
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

        }

    }

     private List<CaseContact> GetNotifyList()
    {
        var CaseCont = _mapper.Map<List<CaseContact>>(FormModel.CaseParticipants.Where(i => i.Selected == true));
        var ProfCont = _mapper.Map<List<CaseContact>>(FormModel.ProfileParticipants.Where(i => i.Selected == true));
        var Originator = FormModel.Originator;
          

        List<CaseContact> notifyList = new List<CaseContact>();
        notifyList.AddRange(CaseCont);
        notifyList.AddRange(ProfCont);


        if (Originator?.Selected ?? false)
        {
            notifyList.Add(new CaseContact() 
                    { 
                        Email = Originator.EMAIL, 
                        Name = Originator.NAMELAST, 
                        Function = "Verursacher/Originator" });
        }

       
        return notifyList;
    }

    private XmlDocument GetAttachedDocs()
    {
        if (FormModel.WithMatchReport)
        {
            int caseTypeId = CaseModel.CaseTypeID == null ? 0 : (int)CaseModel.CaseTypeID;
            string htmlResult = Common.HCMXslTransform.GetHtmlResult(CaseModel.CaseData, caseTypeId);
            byte[] plainTextBytes = System.Text.Encoding.UTF8.GetBytes(htmlResult);

            CaseDocs.AddReport = System.Convert.ToBase64String(plainTextBytes);
        }

        XmlDocument docsXML = new XmlDocument();
        docsXML.LoadXml(CaseDocs.ObjToXml());

        return docsXML;
    }


    private async Task InitFormModel()
    {
        FormModel.CaseSubject = CaseModel.Subject;
        FormModel.CurrentStatusId = CaseModel.CaseStatusID;
        FormModel.ProfileParticipants = GetProfileParticipants();
        FormModel.CaseParticipants = _mapper.Map<List<CaseContactSelectable>>(CaseModel.ParticipantsAsList);
        FormModel.Originator = _mapper.Map<CaseOriginatorSelectable>(CaseModel.Originator);

        StatusList = await CmsService.GetStatusByCase(CaseModel.CaseID);
        foreach (CaseEventStatus s in StatusList)
        {
            s.EventText = Localizer.Str["event_" + s.EventID.Replace(".", "_")];
        }
        
    }

    private List<CaseContactSelectable> GetProfileParticipants()
    {
        var participants = _mapper.Map<List<CaseContactSelectable>>(ProfileModel.profileParticipants);
        if (ProfileModel.NotifyAllProfileParticipants)
        {
            participants?.ForEach(p => p.Selected = true);
        }
        return participants;
    }

    private void NotifyAllOnChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (!ProfileModel.NotifyAllProfileParticipants)
        {
            FormModel.ProfileParticipants?.ForEach(p => p.Selected = (bool)args.Value);
        }

        FormModel.CaseParticipants?.ForEach(p => p.Selected = (bool)args.Value);

        if(FormModel.Originator != null)
        {
            FormModel.Originator.Selected = (bool)args.Value;
        }        
    }
   
    private Dictionary<string, object> htmlAttribute = new Dictionary<string, object>() 
    { 
        {"rows", "4" } 
    }; 
}
