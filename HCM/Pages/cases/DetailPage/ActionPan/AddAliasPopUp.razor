          
@using AliasManager.Interfaces
@using Domain
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Logging
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Lists
@using System.Security.Claims
@using System.Globalization
@using AutoMapper
@using HCM.Pages.cases.DetailPage.Shared
@using System.IO
@using System.Xml
@using static Domain.Models.CaseModel


@if (ShowModal)
{
    <SfDialog Width="950px" ShowCloseIcon="true" IsModal="true" AllowDragging="true" EnableResize="false" @bind-Visible="@ShowModal">
        <DialogEvents OnClose="@CloseDialog" ></DialogEvents>
        <DialogTemplates>
            <Header><div class="tLabel">@Localizer.Str["Cases_AddAlias_Title"]</div></Header>
            <Content>
                @if (_loadingStatus == 0)
                {
                    <p><em>Loading...</em></p>
                }
                @if (_loadingStatus == 1)
                {
                    <div class="mx-4">
                        <EditForm Model="@FormModel" OnValidSubmit="@ValidFormSubmited" >
                            <DataAnnotationsValidator />
                            <div class="row gy-3">
                                <div class="row col-md-7 gy-3">      
                                    <div class="col-12">
                                        <label class="tLabel">@Localizer.Str["Cases_AddMessage_Subject"]</label>
                                        <hr class="mb-2"/>
                                        <div>@FormModel.CaseSubject</div>
                                    </div>

                                    <div class="col-12">
                                        <label class="tLabel2">@Localizer.Str["Cases_AddAlias_SelectLiz"]</label>                                    
                                        <SfComboBox TValue="string" TItem="AliasLizStatus" DataSource="@LizTypeList" @bind-Value="@FormModel.LizIdType"
                                            Placeholder="@Localizer.Str["Value_Select_Text"]">
                                            <ComboBoxFieldSettings Text="LizText" Value="LizID"></ComboBoxFieldSettings>
                                        </SfComboBox>      
                                        <ValidationMessage For="@(() => FormModel.LizIdType)" />
                                    </div>

                                    <div class="col-12">
                                        <label class="tLabel2">@Localizer.Str["Cases_AddAlias_AliasTitle"]</label>
                                        <div class="col-12 p-2 border border-1 bg-light">
                                            <div class="row">
                                                <div class="col-2 tLabel2">@Localizer.Str["Cases_AddAlias_Name"]:</div>
                                                <div class="col-10 itemDetail">@FormModel.AliasName</div>
                                                <div class="col-2 tLabel2">@Localizer.Str["Cases_AddAlias_Street"]:</div>
                                                <div class="col-10">@FormModel.AliasStreet</div>
                                            </div>                                        
                                        </div>
                                        <label class="itemDetail">@Localizer.Str["Cases_AddAlias_RealNameTitle"]</label>
                                    </div>

                                    <div class="col-12">
                                        <label class="tLabel2">@Localizer.Str["Cases_AddAlias_Note"]</label>
                                        <SfTextBox Multiline="true" HtmlAttributes="@htmlAttribute" @bind-Value="@FormModel.Note"></SfTextBox>
                                        <ValidationMessage For="@(() => FormModel.Note)" />
                                        <SfCheckBox @bind-Checked="@FormModel.WithMatchReport" Label="@Localizer.Str["Cases_AddMessage_AddReport"]"></SfCheckBox>
                                    </div>
                                </div>

                                <div class="col-md-1">                           
                                </div>

                                <div class="row col-md-4 itemDetail gy-3">
                                    <div class="col-12">
                                        <label class="tLabel">@Localizer.Str["Cases_AddMessage_NotifyUsers"]</label>
                                        <hr class="mb-2"/>
                                        <SfCheckBox @bind-Checked="@FormModel.NotifyAll" @onchange="NotifyAllOnChange" Label="@Localizer.Str["Value_All_Text"]"></SfCheckBox>
                                    </div>                                

                                    <div class="col-12">
                                        <CaseContactPan 
                                            Source="@FormModel.ProfileParticipants" 
                                            ShowCheckBox="true" 
                                            CheckBoxDisabled="@ProfileModel.NotifyAllProfileParticipants" 
                                            ShowStriped="true" 
                                            ShowRole = "true"
                                            Title="@Localizer.Str["Cases_Detail_Label_ProfileUsers"]"></CaseContactPan>
                                    </div>

                                    <div class="col-12">
                                        <CaseContactPan 
                                            Source="@FormModel.CaseParticipants" 
                                            ShowCheckBox="true" 
                                            ShowStriped="true"
                                            ShowRole = "true"
                                            Title="@Localizer.Str["Cases_Detail_Label_Users"]"></CaseContactPan>
                                    </div>

                                    <div class="col-12">
                                        <CaseOriginatorPan Source="FormModel.Originator" ShowCheckBox="true"></CaseOriginatorPan>
                                    </div>                                 
                                </div>

                                 <div class="col-md-12">
                                    <hr class="mt-4 mb-2"/>
                                    <SfButton Type="submit" IsPrimary="true"  Content="@Localizer.Str["Button_Save"]"></SfButton>                        
                                </div>  

                            </div>
                        </EditForm>
                    </div>

                    <UiMessageBox Data="Messages.List" />
                }
            </Content>
        </DialogTemplates>
    </SfDialog>
}




@code {
    [Inject] private ILogger<AddAliasPopUp> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private IMapper _mapper { get; set; }
    [Inject] public ICMSAPI CmsService{ get; set; }
    [Inject] public CMSSettings cmsSettings { get; set; }
    [Inject] public ISettingsData dbSettingsService { get; set; }
    [Inject] public IAliasManager AliasService { get; set; }


    [CascadingParameter(Name = "CurrentContactId")] protected int CurrentContactId { get; set; }
    [CascadingParameter(Name = "CurrentPrincipal")] protected ClaimsPrincipal CurrentPrincipal { get; set; }

    [Parameter] public Case CaseModel { get; set; }
    [Parameter] public CMSProfileModel ProfileModel { get; set; }
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public EventCallback<bool> ShowModalChanged { get; set; }
    [Parameter] public EventCallback OnFormSaved { get; set; }


    protected AddAliasForm FormModel { get; set; }
    protected List<AliasLizStatus> LizTypeList { get; set; }

    protected UiMessages Messages { get; set; }
    private int _loadingStatus;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Messages = new UiMessages();
        FormModel = new AddAliasForm();
        LizTypeList = new List<AliasLizStatus>();


        _loadingStatus = 0;

        try
        {
            if(CaseModel == null )
            {               
                throw new ArgumentNullException("CaseModel");
            }
            if(ProfileModel == null )
            {               
                throw new ArgumentNullException("ProfileModel");
            }

            InitFormModel();

            _loadingStatus = 1;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

            _loadingStatus = 2;
        }
    }

    public async Task CloseDialog()
    {
        ShowModal = false;
        await ShowModalChanged.InvokeAsync(ShowModal);
    }

    protected async Task ValidFormSubmited()
    {


        try
        {
            Messages.List.Clear();

            try
            {
                await CreateAlias();
            }
            catch (Exception ex)
            {        
                string errMsg; 

                switch (ex.Message)
                {
                    case "AliasExists":
                        errMsg = @Localizer.Str["AliasApiError_100510"];
                        break;

                    case "LicIdNotDetermined":
                        errMsg = @Localizer.Str["AliasApiError_100507"];
                        break;

                    default:
                        _logger.LogError(ex.Message);
                        _logger.LogDebug(ex, ex.Message); 
                        errMsg = @Localizer.Str["AliasApiError_110000"];
                        break;
                }
                throw new Exception(errMsg);
            }

            var notifyList = GetNotifyList();
            var docsXML = GetAttachedDocs();
            await CmsService.OnEvent(CMSSettings.EventAddAlias, CurrentContactId, CaseModel.CaseID, docsXML, FormModel.Note, notifyList);    

            await OnFormSaved.InvokeAsync();
            await CloseDialog();                
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);

            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);
        }

    }
    private List<Contact> GetNotifyList()
    {
        var CaseCont = _mapper.Map<List<Contact>>(FormModel.CaseParticipants.Where(i => i.Selected == true));
        var ProfCont = _mapper.Map<List<Contact>>(FormModel.ProfileParticipants.Where(i => i.Selected == true));
        var Originator = FormModel.Originator;            

        List<Contact> notifyList = new List<Contact>();
        notifyList.AddRange(CaseCont);
        notifyList.AddRange(ProfCont);


        if (Originator?.Selected ?? false)
        {
            notifyList.Add(new Contact() 
                    { 
                        Email = Originator.EMAIL, 
                        Name = Originator.NAMELAST, 
                        Function = "Verursacher/Originator" });
        }
        return notifyList;
    }

    private XmlDocument GetAttachedDocs()
    {
        CaseDocs caseDocs = new CaseDocs();
        if (FormModel.WithMatchReport)
        {
            int caseTypeId = CaseModel.CaseTypeID == null ? 0 : (int)CaseModel.CaseTypeID;
            string htmlResult = XslHelper.HCMXslTransform.GetHtmlResult(CaseModel.CaseData, caseTypeId);
            byte[] plainTextBytes = System.Text.Encoding.UTF8.GetBytes(htmlResult);

            caseDocs.AddReport = System.Convert.ToBase64String(plainTextBytes);
        }

        XmlDocument docsXML = new XmlDocument();
        docsXML.LoadXml(caseDocs.ObjToXml());
        return docsXML;
    }

    private async Task<int> CreateAlias()
    {

        string sapIp = null;
        string sapGw = null;
        string sapMndnt = null;
        string sapTranId = null;
        int? profileId = null;
        string caseUrl;
        string hcmUserFullName;
        string hcmProfilId;
        string hcmProfilName;

        var dbSettings = await dbSettingsService.GetSettings();
        var appUrl = dbSettings?.AppUrl;

        hcmUserFullName = CurrentPrincipal.Claims.Where(c=>c.Type=="FullName").FirstOrDefault().Value;
        hcmProfilId = CaseModel.ProfileID.ToString();
        hcmProfilName = CaseModel.ProfileName;
        caseUrl = appUrl + "/Cases/CaseDetails/" + CaseModel.CaseID.ToString();


        //sap
        if(CaseModel.SettingsData.sapip != null)
        {
            if(FormModel.LizIdType == "own" || FormModel.LizIdType == "beleg")
            {
                sapIp = CaseModel.SettingsData?.sapip;
                sapGw = CaseModel.SettingsData?.sapgw;
                sapMndnt = CaseModel.SettingsData?.sapmandant;

                if(FormModel.LizIdType == "beleg")
                {
                    sapTranId = CaseModel.SrcData?.vbeln;
                }
            }
            else
            {
                profileId = -100;
            }
        }

        //non sap
        if(CaseModel.SettingsData.profileid != 0)
        {
            if(FormModel.LizIdType == "own")
            {
                profileId = CaseModel.SettingsData?.profileid;
            }
            else
            {
                profileId = -100;
            }
        }

        await AliasService.CreateAsync(FormModel.AliasName, FormModel.AliasStreet, FormModel.Note,
                profileId, sapIp, sapGw, sapMndnt, sapTranId, 
                hcmUserFullName, hcmProfilId, hcmProfilName, caseUrl, cmsSettings.VGSAccId);


        return 0;

    } 


    private void InitFormModel()
    {
        if (CaseModel.ContactProfileRole == "GlobalAliasManager")
        {
            LizTypeList.Add(new AliasLizStatus() { LizID = "all", LizText = Localizer.Str["Cases_AddAlias_AllLiz"] });
        }
       
        LizTypeList.Add(new AliasLizStatus() { LizID = "own", LizText = Localizer.Str["Cases_AddAlias_OwnLiz"] });

        if (!String.IsNullOrEmpty(CaseModel.SrcData.vbeln))
        {
            LizTypeList.Add(new AliasLizStatus() { LizID = "beleg", LizText = Localizer.Str["Cases_AddAlias_Beleg"] });
        }

        FormModel.CaseSubject = CaseModel.Subject;
        FormModel.AliasName = CaseModel.SrcData.name;
        FormModel.AliasStreet = CaseModel.SrcData.street;        
        FormModel.ProfileParticipants = GetProfileParticipants();
        FormModel.CaseParticipants = _mapper.Map<List<CaseContactSelectable>>(CaseModel.ParticipantsAsList);
        FormModel.Originator = _mapper.Map<CaseOriginatorSelectable>(CaseModel.Originator);
       
    }

    private List<CaseContactSelectable> GetProfileParticipants()
    {
        var participants = _mapper.Map<List<CaseContactSelectable>>(ProfileModel.profileParticipantsList);
        if (ProfileModel.NotifyAllProfileParticipants)
        {
            participants?.ForEach(p => p.Selected = true);
        }
        return participants;
    }

    private void NotifyAllOnChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (!ProfileModel.NotifyAllProfileParticipants)
        {
            FormModel.ProfileParticipants?.ForEach(p => p.Selected = (bool)args.Value);
        }

        FormModel.CaseParticipants?.ForEach(p => p.Selected = (bool)args.Value);

        if(FormModel.Originator != null)
        {
            FormModel.Originator.Selected = (bool)args.Value;
        }        
    }
   
    private Dictionary<string, object> htmlAttribute = new Dictionary<string, object>() 
    { 
        {"rows", "4" } 
    };
}
