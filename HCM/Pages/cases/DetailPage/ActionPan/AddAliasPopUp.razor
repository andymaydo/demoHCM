                 
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Logging
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Lists
@using System.Security.Claims
@using HCMApi
@using HCMApi.Models
@using System.Globalization
@using AutoMapper
@using HCM.Pages.cases.DetailPage.Shared
@using System.IO
@using System.Xml
@using static HCMModels.CaseModel
@using HCMDataAccess
@using AliasApi
@using static AliasApi.AliasApiSoapClient


@if (ShowModal)
{
    <SfDialog Width="950px" ShowCloseIcon="true" IsModal="true" AllowDragging="true" EnableResize="false" @bind-Visible="@ShowModal">
        <DialogEvents OnClose="@CloseDialog" ></DialogEvents>
        <DialogTemplates>
            <Header><div class=" ml-4 font-weight-bold">@Localizer.Str["Cases_AddAlias_Title"]</div></Header>
            <Content>
                @if (_loadingStatus == 0)
                {
                    <p><em>Loading...</em></p>
                }
                @if (_loadingStatus == 1)
                {
                    <div class="mx-4">
                     <EditForm Model="@FormModel" OnValidSubmit="@ValidFormSubmited" >
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-md-7">      
                                <div class="form-group col-12">
                                    <label class="col-form-label font-weight-bold">@Localizer.Str["Cases_AddMessage_Subject"]</label>
                                    <div>@FormModel.CaseSubject</div>
                                </div>
                                 <div class="form-group col-12">
                                    <label class="col-form-label font-weight-bold">@Localizer.Str["Cases_AddAlias_SelectLiz"]</label>                                    
                                    <SfComboBox TValue="string" TItem="AliasLizStatus" DataSource="@LizTypeList" @bind-Value="@FormModel.LizIdType"
                                        Placeholder="@Localizer.Str["Value_Select_Text"]">
                                        <ComboBoxFieldSettings Text="LizText" Value="LizID"></ComboBoxFieldSettings>
                                    </SfComboBox>      
                                    <ValidationMessage For="@(() => FormModel.LizIdType)" />
                                </div>

                               <div class="form-group col-12">
                                    <label class="col-form-label">@Localizer.Str["Cases_AddAlias_AliasTitle"]</label>
                                    <div class="row">
                                        <div class="col-2 font-weight-bold">@Localizer.Str["Cases_AddAlias_Name"]:</div>
                                        <div class="col-10">@FormModel.AliasName</div>
                                    </div>
                                    <div class="row">
                                        <div class="col-2 font-weight-bold">@Localizer.Str["Cases_AddAlias_Street"]:</div>
                                        <div class="col-10">@FormModel.AliasStreet</div>
                                    </div>
                                    <label class="col-form-label">@Localizer.Str["Cases_AddAlias_RealNameTitle"]</label>
                                </div>

                                <div class="form-group col-12">
                                    <label class="col-form-label font-weight-bold">@Localizer.Str["Cases_AddAlias_Note"]</label>
                                    <SfTextBox CssClass="e-custom-height" Multiline="true"  @bind-Value="@FormModel.Note"></SfTextBox>
                                    <ValidationMessage For="@(() => FormModel.Note)" />
                                </div>

                                <div class="col-12 mb-3">
                                    <SfCheckBox @bind-Checked="@FormModel.WithMatchReport" Label="@Localizer.Str["Cases_AddMessage_AddReport"]"></SfCheckBox>
                                </div>                                 
                            </div>

                            <div class="col-md-1">                           
                            </div>
                            <div class="col-md-4">
                                <h5 class="tLabel">@Localizer.Str["Cases_AddMessage_NotifyUsers"]</h5>
                                <div class="top_blue_bg_thin"></div>

                                <div class="col-12 mb-3">
                                    <SfCheckBox @bind-Checked="@FormModel.NotifyAll" @onchange="NotifyAllOnChange" Label="@Localizer.Str["Value_All_Text"]"></SfCheckBox>
                                </div>

                                <div class="col-12 mb-3">
                                    <CaseContactPan Source="@FormModel.ProfileParticipants" ShowCheckBox="true" CheckBoxDisabled="@ProfileModel.NotifyAllProfileParticipants" ShowStriped="true" 
                                        Title="@Localizer.Str["Cases_Detail_Label_ProfileUsers"]"></CaseContactPan>
                                </div>

                                <div class="col-12 mb-3">
                                    <CaseContactPan Source="@FormModel.CaseParticipants" ShowCheckBox="true" ShowStriped="true" 
                                        Title="@Localizer.Str["Cases_Detail_Label_Users"]"></CaseContactPan>
                                </div>

                                <div class="col-12 mb-3">
                                    <CaseOriginatorPan Source="FormModel.Originator" ShowCheckBox="true"></CaseOriginatorPan>
                                </div>                                 
                            </div>
                        </div>
                       <div class="row py-2 top_blue_bg"></div>
                       <div class="row">
                            <div class="col-12 ">
                                <div class="col-12">
                                    <SfButton Type="submit" CssClass="e-flat e-info" IsPrimary="true"  Content="@Localizer.Str["Button_Save"]" ></SfButton>                        
                                </div>
                            </div>
                       </div>
                     </EditForm>
                    </div>
                }
                <div class="py-3">
                    <UiMessageBox Data="Messages.List" />
                </div>

                 
            </Content>
        </DialogTemplates>
    </SfDialog>

    <style>
        .e-dialog.e-control.e-popup, .e-dialog.e-control.e-popup .e-dlg-header-content {
            background-color: lightcoral;
        }
    </style>
}




@code {
    [Inject] private ILogger<AddAliasPopUp> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private IMapper _mapper { get; set; }
    [Inject] public ICMSAPI CmsService{ get; set; }
    [Inject] public CMSSettings cmsSettings { get; set; }
    [Inject] public ISettingsData dbSettingsService { get; set; }


    [CascadingParameter(Name = "CurrentContactId")] protected int CurrentContactId { get; set; }
    [CascadingParameter(Name = "CurrentPrincipal")] protected ClaimsPrincipal CurrentPrincipal { get; set; }

    [Parameter] public Case CaseModel { get; set; }
    [Parameter] public CMSProfileModel ProfileModel { get; set; }
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public EventCallback<bool> ShowModalChanged { get; set; }
    [Parameter] public EventCallback OnFormSaved { get; set; }


    protected AddAliasForm FormModel { get; set; }
    protected List<AliasLizStatus> LizTypeList { get; set; }

    protected UiMessages Messages { get; set; }
    private AliasApiSoapClient AliasApiClient { get; set; }
    private int _loadingStatus;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Messages = new UiMessages();
        FormModel = new AddAliasForm();
        LizTypeList = new List<AliasLizStatus>();


        _loadingStatus = 0;

        try
        {
            if(CaseModel == null )
            {               
                throw new ArgumentNullException("CaseModel");
            }
            if(ProfileModel == null )
            {               
                throw new ArgumentNullException("ProfileModel");
            }

            InitAliasApiClient();
            InitFormModel();

            _loadingStatus = 1;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

            _loadingStatus = 2;
        }
    }

    public async Task CloseDialog()
    {
        ShowModal = false;
        await ShowModalChanged.InvokeAsync(ShowModal);
    }

    protected async Task ValidFormSubmited()
    {
        try
        {
            Messages.List.Clear();

            var notifyList = GetNotifyList();
            var docsXML = GetAttachedDocs();

            var statusCode = await CreateAlias();

            if(statusCode == 0)
            {
                await CmsService.OnEvent(CMSSettings.EventAddAlias, CurrentContactId, CaseModel.CaseID, docsXML, FormModel.Note, notifyList);    
            }
            else
            {
                throw new Exception(Localizer.Str["AliasApiError_" + statusCode.ToString()]);
            }


            await OnFormSaved.InvokeAsync();
            await CloseDialog();
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

        }

    }
    private List<CaseContact> GetNotifyList()
    {
        var CaseCont = _mapper.Map<List<CaseContact>>(FormModel.CaseParticipants.Where(i => i.Selected == true));
        var ProfCont = _mapper.Map<List<CaseContact>>(FormModel.ProfileParticipants.Where(i => i.Selected == true));
        var Originator = FormModel.Originator;            

        List<CaseContact> notifyList = new List<CaseContact>();
        notifyList.AddRange(CaseCont);
        notifyList.AddRange(ProfCont);


        if (Originator?.Selected ?? false)
        {
            notifyList.Add(new CaseContact() 
                    { 
                        Email = Originator.EMAIL, 
                        Name = Originator.NAMELAST, 
                        Function = "Verursacher/Originator" });
        }
        return notifyList;
    }

    private XmlDocument GetAttachedDocs()
    {
        CaseDocs caseDocs = new CaseDocs();
        if (FormModel.WithMatchReport)
        {
            int caseTypeId = CaseModel.CaseTypeID == null ? 0 : (int)CaseModel.CaseTypeID;
            string htmlResult = Common.HCMXslTransform.GetHtmlResult(CaseModel.CaseData, caseTypeId);
            byte[] plainTextBytes = System.Text.Encoding.UTF8.GetBytes(htmlResult);

            caseDocs.AddReport = System.Convert.ToBase64String(plainTextBytes);
        }

        XmlDocument docsXML = new XmlDocument();
        docsXML.LoadXml(caseDocs.ObjToXml());
        return docsXML;
    }

    private async Task<int> CreateAlias()
    {
        var dbSettings = await dbSettingsService.GetSettings();
        var appUrl = dbSettings?.AppUrl;

        AliasOut aliasRequest = new AliasOut();
        aliasRequest.aliasauth.username = cmsSettings.AliasApiUsr;
        aliasRequest.aliasauth.pwd = cmsSettings.AliasApiPwd;

        //sap
        if(CaseModel.SettingsData.sapip != null)
        {
            if(FormModel.LizIdType == "own" || FormModel.LizIdType == "beleg")
            {
                aliasRequest.aliasauth.sapip = CaseModel.SettingsData?.sapip;
                aliasRequest.aliasauth.sapgw = CaseModel.SettingsData?.sapgw;
                aliasRequest.aliasauth.sapmandant = CaseModel.SettingsData?.sapmandant;

                if(FormModel.LizIdType == "beleg")
                {
                    aliasRequest.aliasauth.saptranid = CaseModel.SrcData?.vbeln;
                }
            }
            else
            {
                aliasRequest.aliasauth.profileid = "-100";
            }
        }

        //non sap
        if(CaseModel.SettingsData.profileid != 0)
        {
            if(FormModel.LizIdType == "own")
            {
                aliasRequest.aliasauth.profileid = CaseModel.SettingsData?.profileid.ToString();
            }
            else
            {
                aliasRequest.aliasauth.profileid = "-100";
            }
        }


        aliasRequest.data.aliasname = System.Net.WebUtility.UrlDecode(FormModel.AliasName);
        aliasRequest.data.aliasaddress = System.Net.WebUtility.UrlDecode(FormModel.AliasStreet);
        aliasRequest.data.aliasnote = System.Net.WebUtility.UrlDecode(FormModel.Note);

        aliasRequest.data.hcmUserFullName = System.Net.WebUtility.UrlDecode(CurrentPrincipal.Claims.Where(c=>c.Type=="FullName").FirstOrDefault().Value.ToString());

        aliasRequest.data.verid = CaseModel.SettingsData.verid;

        aliasRequest.data.caseurl = "<a href=\"" + appUrl + "/cases/detail.aspx?id=" + CaseModel.CaseID.ToString() + "\" target=\"_blank\">" + CaseModel.CaseID.ToString() + "</a>";

        ////api request
        //var aliasResponse = await AliasApiClient.AliasCreateAsync(aliasRequest.AsXml());       

        //XmlDocument resultxml = new XmlDocument();
        //resultxml.LoadXml(aliasResponse.Body.AliasCreateResult);
        //_logger.LogError(resultxml.InnerText);

        //int statusCode;
        //bool successfullyParsed = int.TryParse(resultxml.SelectSingleNode("/root/status/statuscode").InnerText, out statusCode);
        //if (successfullyParsed)
        //{
        //    return statusCode;
        //}
        //else
        //{
        //    return 110000;
        //}

        return 0;

    } 
    private  void InitAliasApiClient()
    {
        var apiUrl = cmsSettings.AliasApiUrl;
        //apiUrl = "http://localhost:1123/AliasApi.asmx";
        AliasApiClient = new AliasApiSoapClient(EndpointConfiguration.AliasApiSoap12, apiUrl);
    }
    private void InitFormModel()
    {

        LizTypeList.Add(new AliasLizStatus() { LizID = "all", LizText = Localizer.Str["Cases_AddAlias_AllLiz"] });
        LizTypeList.Add(new AliasLizStatus() { LizID = "own", LizText = Localizer.Str["Cases_AddAlias_OwnLiz"] });
        if (!String.IsNullOrEmpty(CaseModel.SrcData.vbeln))
        {
            LizTypeList.Add(new AliasLizStatus() { LizID = "beleg", LizText = Localizer.Str["Cases_AddAlias_Beleg"] });
        }

        FormModel.CaseSubject = CaseModel.Subject;
        FormModel.AliasName = CaseModel.SrcData.name;
        FormModel.AliasStreet = CaseModel.SrcData.street;        
        FormModel.ProfileParticipants = GetProfileParticipants();
        FormModel.CaseParticipants = _mapper.Map<List<CaseContactSelectable>>(CaseModel.ParticipantsAsList);
        FormModel.Originator = _mapper.Map<CaseOriginatorSelectable>(CaseModel.Originator);
       
    }

    private List<CaseContactSelectable> GetProfileParticipants()
    {
        var participants = _mapper.Map<List<CaseContactSelectable>>(ProfileModel.profileParticipants);
        if (ProfileModel.NotifyAllProfileParticipants)
        {
            participants?.ForEach(p => p.Selected = true);
        }
        return participants;
    }

    private void NotifyAllOnChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (!ProfileModel.NotifyAllProfileParticipants)
        {
            FormModel.ProfileParticipants?.ForEach(p => p.Selected = (bool)args.Value);
        }

        FormModel.CaseParticipants?.ForEach(p => p.Selected = (bool)args.Value);

        if(FormModel.Originator != null)
        {
            FormModel.Originator.Selected = (bool)args.Value;
        }        
    }
   
}
