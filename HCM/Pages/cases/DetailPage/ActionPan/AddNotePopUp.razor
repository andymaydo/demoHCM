                 
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Logging
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Lists
@using System.Security.Claims
@using HCMApi
@using HCMApi.Models
@using System.Globalization
@using AutoMapper
@using HCM.Pages.cases.DetailPage.Shared
@using System.IO
@using System.Xml


@if (ShowModal)
{
    <SfDialog Width="850px" ShowCloseIcon="true" IsModal="true" AllowDragging="true" EnableResize="false" @bind-Visible="@ShowModal">
        <DialogTemplates>
            <Header><div class=" ml-4 font-weight-bold">@Localizer.Str["Cases_AddMessage_Title"]</div></Header>
            <Content>
                @if (_loadingStatus == 0)
                {
                    <p><em>Loading...</em></p>
                }
                @if (_loadingStatus == 1)
                {
                    <div class="mx-4">
                     <EditForm Model="@FormModel" OnValidSubmit="@ValidFormSubmited" >
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-sm-7">                             
                                <label class="col-2 font-weight-bold">@Localizer.Str["Cases_AddMessage_Subject"]</label>
                                <div class="col-10">@FormModel.CaseSubject</div>

                                <div class="form-group col-12">
                                    <label class="col-form-label font-weight-bold">@Localizer.Str["Cases_AddMessage_Note"]</label>
                                    <SfTextBox CssClass="e-custom-height" Multiline="true" @bind-Value="@FormModel.Note"></SfTextBox>
                                    <ValidationMessage For="@(() => FormModel.Note)" />
                                </div>

                                <div class="col-12 mb-3">
                                    <SfCheckBox @bind-Checked="@FormModel.WithMatchReport" Label="@Localizer.Str["Cases_AddMessage_AddReport"]"></SfCheckBox>
                                </div>

                                <div class="col-12 mb-3">
                                    <FileUploadPan CaseId=CaseModel.CaseID CaseDocs=@CaseDocs></FileUploadPan>
                                </div>   
                            </div>
                            <div class="col-sm-1">                           
                            </div>
                            <div class="col-sm-4">
                                <h5 class="tLabel">@Localizer.Str["Cases_AddMessage_NotifyUsers"]</h5>
                                <div class="top_blue_bg_thin"></div>

                                <div class="col-12 mb-3">
                                    <SfCheckBox @bind-Checked="@FormModel.NotifyAll" @onchange="NotifyAllOnChange" Label="@Localizer.Str["Value_All_Text"]"></SfCheckBox>
                                </div>

                                <div class="col-12 mb-3">
                                    <CaseContactPan Source="@FormModel.ProfileParticipants" ShowCheckBox="true" CheckBoxDisabled="@ProfileModel.NotifyAllProfileParticipants" ShowStriped="true" 
                                        Title="@Localizer.Str["Cases_Detail_Label_ProfileUsers"]"></CaseContactPan>
                                </div>

                                <div class="col-12 mb-3">
                                    <CaseContactPan Source="@FormModel.CaseParticipants" ShowCheckBox="true" ShowStriped="true" 
                                        Title="@Localizer.Str["Cases_Detail_Label_Users"]"></CaseContactPan>
                                </div>

                                <div class="col-12 mb-3">
                                    <CaseOriginatorPan Source="FormModel.Originator" ShowCheckBox="true"></CaseOriginatorPan>
                                </div>

                                 <div class="col-12 mb-3">
                                    <div class="tLabel2">@Localizer.Str["Cases_AddMessage_ExEmails"]</div>
                                    <div class="top_blue_bg"></div>
                                    <SfTextBox Multiline="false" @bind-Value="@FormModel.ExtEmail1"></SfTextBox>
                                    <ValidationMessage For="@(() => FormModel.ExtEmail1)" />                                 
                                </div>
                            </div>
                        </div>
                       <div class="row py-2 top_blue_bg"></div>
                       <div class="row">
                            <div class="col-12 ">
                                <div class="col-12">
                                    <SfButton Type="submit" CssClass="e-flat e-info" IsPrimary="true"  Content="@Localizer.Str["Button_Save"]" ></SfButton>                        
                                </div>
                            </div>
                        </div>
                     </EditForm>
                    </div>
                }
                <div class="py-3">
                    <UiMessageBox Data="Messages.List" />
                </div>

                 
            </Content>
        </DialogTemplates>
    </SfDialog>

    <style>
        .e-dialog.e-control.e-popup, .e-dialog.e-control.e-popup .e-dlg-header-content {
            background-color: lightblue;
        }
    </style>
}




@code {
    [Inject] private ILogger<AddNotePopUp> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private IMapper _mapper { get; set; }
    [Inject] public ICMSAPI CmsService{ get; set; }
    [Inject] public CMSSettings cmsSettings{ get; set; }

    [CascadingParameter(Name = "CurrentContactId")] protected int CurrentContactId { get; set; }
    [Parameter] public Case CaseModel { get; set; }
    [Parameter] public CMSProfileModel ProfileModel { get; set; }
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public EventCallback<bool> ShowModalChanged { get; set; }
    [Parameter] public EventCallback OnNoteSaved { get; set; }

    protected CaseDocs CaseDocs { get; set; }
    protected AddNoteForm FormModel { get; set; }
    protected UiMessages Messages { get; set; }
    private int _loadingStatus;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Messages = new UiMessages();
        FormModel = new AddNoteForm();
        CaseDocs = new CaseDocs();

        _loadingStatus = 0;

        try
        {
            if(CaseModel == null )
            {               
                throw new ArgumentNullException("CaseModel");
            }
            if(ProfileModel == null )
            {               
                throw new ArgumentNullException("ProfileModel");
            }

            InitFormModel();

            _loadingStatus = 1;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

            _loadingStatus = 2;
        }
    }

    public void Show(string licId, string licName)
    {
        ShowModal = true;
    }

    public void CloseDialog()
    {
        ShowModal = false;
    }


    protected async Task ValidFormSubmited()
    {
        try
        {
            var CaseCont = _mapper.Map<List<CaseContact>>(FormModel.CaseParticipants.Where(i => i.Selected == true));
            var ProfCont = _mapper.Map<List<CaseContact>>(FormModel.ProfileParticipants.Where(i => i.Selected == true));
            var Originator = FormModel.Originator;
            var ExtEmail = FormModel.ExtEmail1;

            #region NotifyList
            List<CaseContact> notifyList = new List<CaseContact>();
            notifyList.AddRange(CaseCont);
            notifyList.AddRange(ProfCont);

            if ((bool)Originator?.Selected)
            {
                notifyList.Add(new CaseContact() 
                        { 
                            Email = Originator.EMAIL, 
                            Name = Originator.NAMELAST, 
                            Function = "Verursacher/Originator" });
            }

            if (!String.IsNullOrEmpty(ExtEmail))
            {
                notifyList.Add(new CaseContact() 
                        { 
                            Email = ExtEmail, 
                            Name = "Extern" });
            }
            #endregion

            #region DocumentList
            if (FormModel.WithMatchReport)
            {
                int caseTypeId = CaseModel.CaseTypeID == null ? 0 : (int)CaseModel.CaseTypeID;
                string htmlResult = Common.HCMXslTransform.GetHtmlResult(CaseModel.CaseData, caseTypeId);
                byte[] plainTextBytes = System.Text.Encoding.UTF8.GetBytes(htmlResult);

                CaseDocs.AddReport = System.Convert.ToBase64String(plainTextBytes);
            }

            XmlDocument docsXML = new XmlDocument();
            docsXML.LoadXml(CaseDocs.ObjToXml());
            #endregion


            await CmsService.OnEvent(CMSSettings.EventAddMessage, CurrentContactId, CaseModel.CaseID, docsXML, FormModel.Note, notifyList);
            

            await OnNoteSaved.InvokeAsync();
            CloseDialog();
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

        }

    }

    private void InitFormModel()
    {
        FormModel.CaseSubject = CaseModel.Subject;
        FormModel.ProfileParticipants = GetProfileParticipants();
        FormModel.CaseParticipants = _mapper.Map<List<CaseContactSelectable>>(CaseModel.ParticipantsAsList);
        FormModel.Originator = _mapper.Map<CaseOriginatorSelectable>(CaseModel.Originator);
    }

    private List<CaseContactSelectable> GetProfileParticipants()
    {
        var participants = _mapper.Map<List<CaseContactSelectable>>(ProfileModel.profileParticipants);
        if (ProfileModel.NotifyAllProfileParticipants)
        {
            participants?.ForEach(p => p.Selected = true);
        }
        return participants;
    }

    private void NotifyAllOnChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (!ProfileModel.NotifyAllProfileParticipants)
        {
            FormModel.ProfileParticipants?.ForEach(p => p.Selected = (bool)args.Value);
        }

        FormModel.CaseParticipants?.ForEach(p => p.Selected = (bool)args.Value);

        if(FormModel.Originator != null)
        {
            FormModel.Originator.Selected = (bool)args.Value;
        }        
    }
   
}
