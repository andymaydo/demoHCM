@using Syncfusion.Blazor.Lists

 <h5 class="tLabel2">@Title</h5>
 <hr class="mb-2"/>
    
@if(Source?.Count > 0)
{
    <table class="table @(ShowStriped && Source.Count > 2 ? "table-striped" : "") table-hover table-borderless table-sm">              
        <tbody class="itemDetail">
            
            
            @foreach (CaseContactSelectable c in Source)
            {
                var itemName = c.Name;
                itemName = itemName + (@ShowFunction ? " (" + c.Function + ")" : "");
                itemName = itemName + (@ShowRole ? " (" + c.ProfileRole + ")" : "");
                itemName = itemName + (@ShowEmail ? " (" + c.Email + ")" : "");
                <tr>                  
                    <td>
                        @if (@ShowCheckBox)
                        {
                            <SfCheckBox @bind-Checked="@c.Selected" Label="@itemName" Disabled="@CheckBoxDisabled"></SfCheckBox>
                        }
                        else
                        {
                            @itemName
                        }

                    </td>  
                    @if (@AllowDelete)
                    {
                        <td align="right">
                            <a href="" @onclick="@(() => DeleteFromList(c.ContactID))" @onclick:preventDefault><i class="fa-regular fa-trash-can"></i> @Localizer.Str["Button_Del"]</a>
                        </td>
                    }
                </tr>       
            }
            
        </tbody>
    </table>
}
else
{
    <div class="itemDetail">@Localizer.Str["Value_NoData"]</div>
}     


@code {

    [Inject] private CommonLocalizationService Localizer { get; set; }


    [Parameter] public List<CaseContactSelectable> Source { get; set; }
    [Parameter] public string Title { get; set; }

    [Parameter] public bool ShowCheckBox { get; set; }
    [Parameter] public bool CheckBoxDisabled { get; set; }
    [Parameter] public bool ShowFunction { get; set; }
    [Parameter] public bool ShowRole { get; set; }
    [Parameter] public bool ShowEmail { get; set; }
    [Parameter] public bool ShowStriped { get; set; }
    [Parameter] public bool AllowDelete { get; set; }
    [Parameter] public EventCallback OnSorceItemDeleted { get; set; }

    protected async Task DeleteFromList(int cid)
    {
        Source.RemoveAll(r => r.ContactID == cid);
        await OnSorceItemDeleted.InvokeAsync();
    }
}
