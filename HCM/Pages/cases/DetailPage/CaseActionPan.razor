@using HCM.Pages.cases.DetailPage.ActionPan

    <div class="tLabel">@Localizer.Str["Cases_Detail_Actions"]</div>
    <hr class="mb-2" />

    @if (_loadingStatus == 0)
    {
        <p><em>Loading...</em></p>
    }
    @if (_loadingStatus == 1)
    {
        <div class="row pb-5 g-2 itemDetail">
            <div class="col-lg-12">
                <a href="" @onclick="@(() => showAddNotePopUp = true)" @onclick:preventDefault><span class="oi oi-tag"></span> @Localizer.Str["Cases_Detail_Action_AddMessage"]</a>
            </div>
            <div class="col-lg-12">
                <a href="" @onclick="@(() => showAddParticipantPopUp = true)" @onclick:preventDefault><span class="oi oi-person"></span> @Localizer.Str["Cases_Detail_Action_AddUser"]</a>
            </div>

            @if (showChangeStatusLink)
            {
                <div class="col-lg-12">
                    <a href="" @onclick="@(() => showChangeStatusPopUp = true)" @onclick:preventDefault><span class="oi oi-wrench"></span> @Localizer.Str["Cases_Detail_Action_ChangeStatus"]</a>
                </div>
            }

            @if (CaseRole == "AliasManager")
            {
                <div class="col-lg-12">
                    <a href="" @onclick="@(() => showAddAliasPopUp = true)" @onclick:preventDefault><span class="oi oi-task"></span> @Localizer.Str["Cases_Detail_Action_AddAlias"]</a>
                </div>
            }
        </div>

        @if (showAddNotePopUp)
        {
            <AddNotePopUp @bind-ShowModal="showAddNotePopUp" CaseModel="@CaseModel" ProfileModel="@ProfileModel" OnFormSaved=@(() => OnNoteAction.InvokeAsync())></AddNotePopUp>
        }
        @if (showChangeStatusPopUp)
        {
            <ChangeStatusPopUp @bind-ShowModal="showChangeStatusPopUp" CaseModel="@CaseModel" ProfileModel="@ProfileModel" OnFormSaved=@(() => OnChangeStatusAction.InvokeAsync())></ChangeStatusPopUp>
        }
        @if (showAddParticipantPopUp)
        {
            <AddParticipantPopUp @bind-ShowModal="showAddParticipantPopUp" CaseModel="@CaseModel" ProfileModel="@ProfileModel" OnFormSaved=@(() => OnAddUserAction.InvokeAsync())></AddParticipantPopUp>
        }
        @if (showAddAliasPopUp)
        {
            <AddAliasPopUp @bind-ShowModal="showAddAliasPopUp" CaseModel="@CaseModel" ProfileModel="@ProfileModel" OnFormSaved=@(() => OnAddAliasAction.InvokeAsync())></AddAliasPopUp>
        }
    }

    <UiMessageBox Data="Messages.List" />

@code {

    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private ILogger<CaseActionPan> _logger { get; set; }
    [Inject] public ICMSAPI CmsService{ get; set; }
    [Inject] private ILookUpTables LookupService { get; set; }

    [CascadingParameter(Name = "CurrentContactId")] protected int CurrentContactId { get; set; }
    [Parameter] public Case CaseModel { get; set; }
    [Parameter] public CMSProfileModel ProfileModel { get; set; }


    [Parameter] public EventCallback OnNoteAction { get; set; }
    [Parameter] public EventCallback OnAddUserAction { get; set; }
    [Parameter] public EventCallback OnChangeStatusAction { get; set; }
    [Parameter] public EventCallback OnAddAliasAction { get; set; }


    protected string CaseRole { get; set; }
    protected bool showAddNotePopUp { get; set; }
    protected bool showChangeStatusPopUp { get; set; }
    protected bool showChangeStatusLink { get; set; }
    protected bool showAddParticipantPopUp { get; set; }
    protected bool showAddAliasPopUp { get; set; }
    protected UiMessages Messages { get; set; }
    private int _loadingStatus;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loadingStatus = 0;

            await base.OnInitializedAsync();
            Messages = new UiMessages();

           #region Input-Validation 
            if(CaseModel == null )
            {               
                throw new ArgumentNullException("CaseModel");
            }
            if(ProfileModel == null )
            {               
                throw new ArgumentNullException("ProfileModel");
            }
            #endregion

           #region showChangeStatusLink
            if(CaseModel.ContactProfileRole == "User")
            {
                if (LookupService.StatusRoleEventsList.Where(
                        x => x.CaseRole == "User" && x.CaseStatusID == CaseModel.CaseStatusID
                    ).ToList().Count > 0)
                {
                    showChangeStatusLink = true;
                }
                else
                {
                    showChangeStatusLink = false;
                }               
            }
            else
            {
                showChangeStatusLink = true;
            }
            #endregion

            _loadingStatus = 1;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

            _loadingStatus = 2;
        }

    }

}
