@using HCMApi
@using BlazorDownloadFile;
@using System.IO
@using HCM.Options
@using System.Xml

@if(DocList != null)
{
    <h5 class="tLabel2">@Localizer.Str["Cases_Detail_Label_AttachInformation"]</h5>
    <hr class="mb-2"/>
               
    <table class="table table-striped table-borderless table-sm">              
        <tbody class="itemDetail">

            @foreach (CaseDoc cd in DocList.CaseDocList)
            {
                <tr>                  
                    <td>
                        <a href="" @onclick="@(() => StartDownload(cd.CaseID,cd.FilePath,cd.DocName))" @onclick:preventDefault class="btnUpdate">@cd.OrgFileName</a>
                    </td>  
                    <td align="right">
                         @(cd.DocSize / 1024) Kb
                    </td>                                        
                </tr>
            }
                <tr>                  
                    <td>@Localizer.Str["Cases_AddMessage_AddReport"]</td>  
                    <td align="right">@MatchReportAdded</td>                                        
                </tr>

                @*<tr>
                    <td colspan=2>
                        <UiMessageBox Data="Messages.List" />
                    </td>                    
                </tr>*@
            </tbody>
    </table>

    <UiMessageBox Data="Messages.List" />

   
    
}
    
        

@code {
    [Inject] private ILogger<CaseEventDocList> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private ICaseDoc CaseDocService { get; set; }
    [Inject] private CMSSettings cmsSettingsService { get; set; }
    [Inject] private IBlazorDownloadFileService blazorDownloadFileService { get; set; }


    [Parameter] public string XmlDocList { get; set; }

    protected CaseDocs DocList = new CaseDocs();
    protected string MatchReportAdded;
    protected UiMessages Messages { get; set; } = new UiMessages();



    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        try
        {
            Messages.List.Clear();
            DocList = ObjHelper.FromXml<CaseDocs>(XmlDocList, "CaseDocs");
        }
        catch { };

        MatchReportAdded = (String.IsNullOrEmpty(DocList?.AddReport )) ? @Localizer.Str["Status_NO"] : @Localizer.Str["Status_Yes"];        

    }


    public async Task StartDownload(int CaseID, string FilePath, string DocName)
    {
        try
        {
            var memory = new MemoryStream();
            var contentRootPath = (string)AppDomain.CurrentDomain.GetData("ContentRootPath");
            string path = Path.Combine(contentRootPath, cmsSettingsService.CmsDocPath);
            string fullPath = path + "\\" +  FilePath;

            if (File.Exists(fullPath))
            {
                await using (var stream = new FileStream(fullPath, FileMode.Open))
                {
                    await stream.CopyToAsync(memory);
                }
                memory.Position = 0;

                await blazorDownloadFileService.DownloadFile(DocName, memory, "application/octet-stream");                
            }
            
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

        }


    }                            
}
