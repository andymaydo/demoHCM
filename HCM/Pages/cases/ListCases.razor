@page "/case/list"

@using HCMApi;
@using HCMDataAccess;
@using HCMModels;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using System.Security.Claims


@inject ProtectedSessionStorage ProtectedSessionStore


@inject ICMSAPI _ICMSAPI;
@inject IStringLocalizer<App> Localizer
@inject IFiltersData _filtersData;
@*@inject ILocalStorageService _storageService*@
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


@attribute [Authorize]

<h3>@Localizer["Cases_Title"]</h3>
<h6>@Localizer["Label_Filter"]</h6>


<div class="top_blue_bg"></div>

<div class="container-fluid">
    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3  control_padding">@Localizer["Label_Filter_Case_Created"]</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker Locale="@CurrentCulture" TValue="DateTime?" @bind-Value='@CreateFromDateValue' StrictMode=true ShowTodayButton="false"></SfDatePicker>
            </div>

            <label class="col-sm-1 control_padding">-</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker Locale="@CurrentCulture" TValue="DateTime?" @bind-Value='@CreateToDateValue' StrictMode=true ShowTodayButton="false"></SfDatePicker>
            </div>
        </div>
        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Platform"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox TValue="string" TItem="FiltersModels.GateModel" @bind-Value="_selectedAppId" Placeholder="@Localizer["Value_All_Text"]" ShowClearButton="true" DataSource="@_Gates">
                    <ComboBoxEvents TItem="FiltersModels.GateModel" TValue="string" ValueChange="onChangePlatform"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="appName" Value="appID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_CaseID"]</label>
            <div class="col-sm-8 control_padding">
                <SfTextBox Placeholder="@Localizer["Label_Filter_Case_CaseID"]" @bind-Value="@FilterCaseIDValue"></SfTextBox>
            </div>
        </div>
    </div>

    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3 control_padding">@Localizer["Label_Filter_Case_Modify"]</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker Locale="@CurrentCulture" TValue="DateTime?" @bind-Value='@ModifyFromDateValue' StrictMode=true ShowTodayButton="false"></SfDatePicker>
            </div>

            <label class="col-sm-1 control_padding">-</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker Locale="@CurrentCulture" TValue="DateTime?" @bind-Value='@ModifyToDateValue' StrictMode=true ShowTodayButton="false"></SfDatePicker>
            </div>
        </div>
        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_ProfileID"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox TValue="string" TItem="FiltersModels.ProfileModel" @bind-Value='@_selectedProfileId'  Placeholder="@Localizer["Value_All_Text"]" DataSource="@_Profile">
                    <ComboBoxFieldSettings Text="ProfileName" Value="ProfileID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_CustomerName"]</label>
            <div class="col-sm-8 control_padding">
                <SfTextBox Placeholder="@Localizer["Label_Filter_CustomerName"]" @bind-Value="@FilterCustomerNameValue" ></SfTextBox>
            </div>
        </div>
    </div>

    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3 control_padding">&nbsp;</label>
            <div class="col-sm-4 control_padding">
                <SfCheckBox @bind-Checked="OnlyActiveIsChecked" Label="@Localizer["Label_Filter_Case_OnlyActive"]" TChecked="bool" Disabled></SfCheckBox>
            </div>
        </div>

        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Category"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox TValue="string" TItem="FiltersModels.CategoryModel"  @bind-Value='@_selectedCategory' Placeholder="@Localizer["Value_All_Text"]" DataSource="@_Category">
                    <ComboBoxFieldSettings Text="CaseType" Value="CaseTypeID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 control_padding">

        </div>
    </div>

    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">

        </div>
        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Status"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox TValue="string" TItem="FiltersModels.CaseStatusModel"  @bind-Value='@_selectedStatusId' Placeholder="@Localizer["Value_All_Text"]" DataSource="@Statuses">
                    <ComboBoxFieldSettings Text="CaseStatus" Value="CaseStatusID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 control_padding">

        </div>
    </div>
</div>

<div class="bottom_blue_bg"></div>

<div class="row py-3">
    <div class="col-sm">
        <SfButton CssClass="e-flat" IsPrimary="true" IconCss="e-icons-hcm e-hcm-search" Content="@Localizer["Button_Filter"]" IsToggle="true" @onclick="onGo_Click"></SfButton>
        <SfButton CssClass="e-flat" IsPrimary="true" Content="@Localizer["Button_Filter_Reset"]" IsToggle="true" @onclick="ClearFilter"></SfButton>
    </div>
</div>

<div class="blue_bg"></div>

<h4>@Localizer["Cases_ListCases"]</h4>

<SfGrid DataSource="@Cases" AllowPaging="true" AllowResizing="false" AllowTextWrap="true"  AllowSorting="true" Locale="@CurrentCulture">
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings> 
    <GridPageSettings PageSizes="true" ></GridPageSettings>
    <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="Case"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(Case.CaseID) HeaderText="@Localizer["Cases_List_CaseID"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="90"></GridColumn>
        <GridColumn Field=@nameof(Case.ProfileName) HeaderText="@Localizer["Label_Filter_ProfileID"]" ></GridColumn>
        <GridColumn Field=@nameof(Case.Subject) HeaderText="@Localizer["Cases_List_Subject"]" ></GridColumn>
        <GridColumn Field=@nameof(Case.CaseType) HeaderText="@Localizer["Cases_List_Category"]" ></GridColumn>
        <GridColumn Field=@nameof(Case.CaseStatus) HeaderText="@Localizer["Cases_List_Status"]" >
            <Template>
                @{
                    var _Case = (context as Case);
                    <div>
                        @Localizer["Case_Status_" + _Case.CaseStatusID.ToString()]
                    </div>
                }
            </Template>

        </GridColumn>
        @*<GridColumn Field=@nameof(Case.CaseResult) HeaderText="@Localizer["Cases_List_Ergebnis"]"></GridColumn>*@
        <GridColumn Field=@nameof(Case.CustomerName) HeaderText="@Localizer["Cases_List_GeprufterName"]" ></GridColumn>
        <GridColumn Field=@nameof(Case.CreateDate) HeaderText="@Localizer["Cases_List_CreateOn"]" ></GridColumn>        
        <GridColumn Field=@nameof(Case.LastActivity) HeaderText="@Localizer["Cases_List_LastModify"]" ></GridColumn>
        <GridColumn Field=@nameof(Case.SapUser)></GridColumn>
        @*<GridColumn HeaderText="" Width="40">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat"})"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>*@
    </GridColumns>
</SfGrid>

<div class="pt-3">
    <UiMessageBox Data="Messages.List" />
</div>

<div class="blue_bg mt-3"></div>







@code {

    [Inject] private ILogger<ListCases> _logger { get; set; }

    [CascadingParameter(Name = "CurrentContactId")] protected string CurrentContactId { get; set; }
   

    private UiMessages Messages { get; set; }

    private DateTime? CreateFromDateValue { get; set; } 
    private DateTime? CreateToDateValue { get; set; } 

    private DateTime? ModifyFromDateValue { get; set; } 
    private DateTime? ModifyToDateValue { get; set; } 


    private string FilterCaseIDValue { get; set; } 
    private string FilterCustomerNameValue { get; set; } 

    private bool OnlyActiveIsChecked = true;


    private string _selectedAppId { get; set; }
    private List<FiltersModels.GateModel> _Gates;

    private string _selectedStatusId { get; set; }
    private List<FiltersModels.CaseStatusModel> Statuses
    {
        get
        {
            List<FiltersModels.CaseStatusModel> _Statuses = _filtersData.GetStatuses();
            foreach (FiltersModels.CaseStatusModel status in _Statuses)
            {
                status.CaseStatus = Localizer["Case_Status_" + status.CaseStatusID.ToString()];
            }
            return _Statuses;
        }
    }

    private string _selectedCategory { get; set; }
    private List<FiltersModels.CategoryModel> _Category;

    private string _selectedProfileId { get; set; }
    private List<FiltersModels.ProfileModel> _Profile;

    private List<Case> Cases { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            Messages = new UiMessages();
            _Gates = await _filtersData.GetGates();
            _selectedAppId = _Gates[0].appID;
        }
        catch (Exception ex)
        {            
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer["MsgPanel_Error_Title"],ex.Message, showDetail: true);
        }
        onChangePlatform();        
    }

    async Task onGo_Click()
    {
        Messages.List.Clear();

        int tempVal;
        int? _caseid = int.TryParse(FilterCaseIDValue, out tempVal) ? tempVal : (int?)null;
        int? _appid = int.TryParse(_selectedAppId, out tempVal) ? tempVal : (int?)null;
        int? _casetypeid = int.TryParse(_selectedCategory, out tempVal) ? tempVal : (int?)null;
        int? _casestatusid = int.TryParse(_selectedStatusId, out tempVal) ? tempVal : (int?)null;
        int? _profileID = int.TryParse(_selectedProfileId, out tempVal) ? tempVal : (int?)null;

        //int _contactID = int.TryParse(CurrentPrincipal.Claims.Where(c => c.Type == "ContactID").FirstOrDefault().Value.ToString(),out tempVal) 
        //    ? tempVal : -1;


        try
        {
            Cases = await _ICMSAPI.GetCaseList(_caseid, _appid, _casetypeid, _casestatusid, CurrentContactId,
                        CreateFromDateValue, CreateToDateValue, ModifyFromDateValue, ModifyToDateValue, 
                        _profileID, FilterCustomerNameValue);
        }
        catch (Exception ex)
        {            
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer["MsgPanel_Error_Title"],ex.Message, showDetail: true);
        }
    }


    protected void ClearFilter()
    {
        _selectedAppId = _Gates[0].appID;
        _selectedStatusId = null;
        _selectedCategory = null;
        _selectedProfileId = null;
        CreateFromDateValue = null;
        CreateToDateValue = null;
        ModifyFromDateValue = null;
        ModifyToDateValue = null;
        FilterCaseIDValue = null;
        FilterCustomerNameValue = null;
        OnlyActiveIsChecked = true;
    }

    public async Task RecordDoubleClickHandler(RecordDoubleClickEventArgs<Case> args)
    {
        await ProtectedSessionStore.SetAsync("CaseViewID", args.RowData.CaseID);

        //NavigationManager.NavigateTo("/case/details", forceLoad: true);
        await JSRuntime.InvokeAsync<object>("open", "/case/details", "_blank");
    }

    private void onChangePlatform()
    {
        Messages.List.Clear();
        int intAppId = Int32.TryParse(_selectedAppId, out var tempVal) ? tempVal : -1;

        try
        {
            _Category = _filtersData.GetCategories(intAppId);
            _Profile = _filtersData.GetProfiles(intAppId); 
        }
        catch (Exception ex)
        {            
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer["MsgPanel_Error_Title"],ex.Message, showDetail: true);
        }
    }

}
