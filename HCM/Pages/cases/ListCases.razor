@page "/case/list"

@using HCMApi;
@using HCMDataAccess;
@using HCMModels;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using System.Security.Claims



@inject ICMSAPI _ICMSAPI;
@inject IStringLocalizer<App> Localizer
@inject IFiltersData _filtersData;
@inject ILocalStorageService _storageService
@inject NavigationManager NavigationManager


@attribute [Authorize]

<h3>@Localizer["Cases_Title"]</h3>

<h4 class="tLabel bottom_blue_bg">@Localizer["Label_Filter"]</h4>

<div class="container-fluid">
    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3  control_padding">@Localizer["Label_Filter_Case_Created"]</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker Locale="@CurrentCulture" TValue="DateTime?" @bind-Value='@CreateFromDateValue' StrictMode=true ShowTodayButton="false"></SfDatePicker>
            </div>

            <label class="col-sm-1 control_padding">-</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker Locale="@CurrentCulture" TValue="DateTime?" @bind-Value='@CreateToDateValue' StrictMode=true ShowTodayButton="false"></SfDatePicker>
            </div>
        </div>
        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Platform"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="GateComboObj" TValue="string" TItem="FiltersModels.GateModel" @bind-Value="appId" Placeholder="@Localizer["Value_All_Text"]" ShowClearButton="true" DataSource="@_Gates">
                    <ComboBoxEvents TItem="FiltersModels.GateModel" TValue="string" ValueChange="onChangePlatform"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="appName" Value="appID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_CaseID"]</label>
            <div class="col-sm-8 control_padding">
                <SfTextBox @ref="FilterCaseIDObj" Placeholder="@Localizer["Label_Filter_Case_CaseID"]" @bind-Value="@FilterCaseIDValue"></SfTextBox>
            </div>
        </div>
    </div>

    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3 control_padding">@Localizer["Label_Filter_Case_Modify"]</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker Locale="@CurrentCulture" TValue="DateTime?" @bind-Value='@ModifyFromDateValue' StrictMode=true ShowTodayButton="false"></SfDatePicker>
            </div>

            <label class="col-sm-1 control_padding">-</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker Locale="@CurrentCulture" TValue="DateTime?" @bind-Value='@ModifyToDateValue' StrictMode=true ShowTodayButton="false"></SfDatePicker>
            </div>
        </div>
        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_ProfileID"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="ProfileComboObj" TValue="string" TItem="FiltersModels.ProfileModel" Placeholder="@Localizer["Value_All_Text"]" DataSource="@_Profile">
                    <ComboBoxFieldSettings Text="ProfileName" Value="ProfileID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_CustomerName"]</label>
            <div class="col-sm-8 control_padding">
                <SfTextBox @ref="FilterCustomerNameObj" Placeholder="@Localizer["Label_Filter_CustomerName"]" @bind-Value="@FilterCustomerNameValue" ></SfTextBox>
            </div>
        </div>
    </div>

    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3 control_padding">&nbsp;</label>
            <div class="col-sm-4 control_padding">
                <SfCheckBox @bind-Checked="OnlyActiveIsChecked" Label="@Localizer["Label_Filter_Case_OnlyActive"]" TChecked="bool" Disabled></SfCheckBox>
            </div>
        </div>

        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Category"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="CategoryComboObj" TValue="string" TItem="FiltersModels.CategoryModel" Placeholder="@Localizer["Value_All_Text"]" DataSource="@_Category">
                    <ComboBoxFieldSettings Text="CaseType" Value="CaseTypeID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 control_padding">

        </div>
    </div>

    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">

        </div>
        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Status"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="StatusComboObj" TValue="string" TItem="FiltersModels.CaseStatusModel" Placeholder="@Localizer["Value_All_Text"]" DataSource="@Statuses">
                    <ComboBoxFieldSettings Text="CaseStatus" Value="CaseStatusID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 control_padding">

        </div>
    </div>

    <div class="row">
        <hr style="background-color: #598992;height: 1px;width: 100%" />
    </div>

    <div class="row">
        <div class="col-sm">
            <SfButton CssClass="e-flat" IsPrimary="true" IconCss="e-icons-hcm e-hcm-search" Content="@Localizer["Button_Filter"]" IsToggle="true" @onclick="onGo_Click"></SfButton>
            <SfButton CssClass="e-flat" IsPrimary="true" Content="@Localizer["Button_Filter_Reset"]" IsToggle="true" @onclick="ClearFilter"></SfButton>
        </div>
    </div>



</div>

<h4 class="blue_bg mt-3">@Localizer["Cases_ListCases"]</h4>

<SfGrid @ref="CaseGrid" DataSource="@Cases" AllowPaging="true" AllowResizing="false" AllowTextWrap="true"  AllowSorting="true" Locale="@CurrentCulture">
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings> 
    <GridPageSettings PageSizes="true" ></GridPageSettings>
    <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="Case"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(Case.CaseID) HeaderText="@Localizer["Cases_List_CaseID"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="90"></GridColumn>
        <GridColumn Field=@nameof(Case.ProfileName) HeaderText="@Localizer["Label_Filter_ProfileID"]" ></GridColumn>
        <GridColumn Field=@nameof(Case.Subject) HeaderText="@Localizer["Cases_List_Subject"]" ></GridColumn>
        <GridColumn Field=@nameof(Case.CaseType) HeaderText="@Localizer["Cases_List_Category"]" ></GridColumn>
        <GridColumn Field=@nameof(Case.CaseStatus) HeaderText="@Localizer["Cases_List_Status"]" >
            <Template>
                @{
                    var _Case = (context as Case);
                    <div>
                        @Localizer["Case_Status_" + _Case.CaseStatusID.ToString()]
                    </div>
                }
            </Template>

        </GridColumn>
        @*<GridColumn Field=@nameof(Case.CaseResult) HeaderText="@Localizer["Cases_List_Ergebnis"]"></GridColumn>*@
        <GridColumn Field=@nameof(Case.CustomerName) HeaderText="@Localizer["Cases_List_GeprufterName"]" ></GridColumn>
        <GridColumn Field=@nameof(Case.CreateDate) HeaderText="@Localizer["Cases_List_CreateOn"]" ></GridColumn>        
        <GridColumn Field=@nameof(Case.LastActivity) HeaderText="@Localizer["Cases_List_LastModify"]" ></GridColumn>
        <GridColumn Field=@nameof(Case.SapUser)></GridColumn>
        @*<GridColumn HeaderText="" Width="40">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat"})"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>*@
    </GridColumns>
</SfGrid>

<div class="row">
    <hr style="        background-color: #598992;
        height: 1px;
        width: 100%" />
</div>
<div class="row">
    &nbsp;
</div>


@code {

    [CascadingParameter(Name = "CurrentCulture")] protected string CurrentCulture { get; set; }
    [CascadingParameter(Name = "CurrentPrincipal")] protected ClaimsPrincipal CurrentPrincipal { get; set; }

    SfComboBox<string, FiltersModels.GateModel> GateComboObj;
    SfComboBox<string, FiltersModels.CategoryModel> CategoryComboObj;
    SfComboBox<string, FiltersModels.CaseStatusModel> StatusComboObj;
    SfComboBox<string, FiltersModels.ProfileModel> ProfileComboObj;

    private SfGrid<Case> CaseGrid; 

    public DateTime? CreateFromDateValue { get; set; } // = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime? CreateToDateValue { get; set; } // = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                                                     //public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 05);
                                                     //public DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 27);
    public DateTime? ModifyFromDateValue { get; set; } // = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime? ModifyToDateValue { get; set; } // = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

    SfTextBox FilterCaseIDObj;
    public string FilterCaseIDValue { get; set; } // = "Hello, World!";
    SfTextBox FilterCustomerNameObj;
    public string FilterCustomerNameValue { get; set; } // = "Hello, World!";

    private bool OnlyActiveIsChecked = true;

    private string appId { get; set; }
    private List<FiltersModels.GateModel> _Gates;

    private List<Case> Cases { get; set; }
 
    private List<FiltersModels.CaseStatusModel> Statuses
    {
        get
        {
            List<FiltersModels.CaseStatusModel> _Statuses = _filtersData.GetStatuses();
            foreach (FiltersModels.CaseStatusModel status in _Statuses)
            {
                status.CaseStatus = Localizer["Case_Status_" + status.CaseStatusID.ToString()];
            }
            return _Statuses;
        }
    }
    private List<FiltersModels.CategoryModel> _Category;
    private List<FiltersModels.ProfileModel> _Profile;
    private int[] GridPageSizes;


    protected override async Task OnInitializedAsync()
    {
        GridPageSizes = new int[] {0, 5, 10, 20, 50 };
        _Gates = await _filtersData.GetGates();
        appId = _Gates[0].appID;
        onChangePlatform();
    }

    async Task onGo_Click()
    {
        int? _caseid = null;
        try
        {
            if (!string.IsNullOrEmpty(FilterCaseIDValue))
                _caseid = Convert.ToInt32(FilterCaseIDValue);
        }
        catch { };

        int? _appid = null;
        try
        {
            if (!string.IsNullOrEmpty(GateComboObj.Value))
                _appid = Convert.ToInt32(GateComboObj.Value);
        }
        catch { };
        int? _casetypeid = null;
        try
        {
            if (!string.IsNullOrEmpty(CategoryComboObj.Value))
                _casetypeid = Convert.ToInt32(CategoryComboObj.Value);
        }
        catch { };
        int? _casestatusid = null;
        try
        {
            if (!string.IsNullOrEmpty(StatusComboObj.Value))
                _casestatusid = Convert.ToInt32(StatusComboObj.Value);
        }
        catch { };
        int? ProfileID = null;
        try
        {
            if (!string.IsNullOrEmpty(ProfileComboObj.Value))
                ProfileID = Convert.ToInt32(ProfileComboObj.Value);
        }
        catch { };


        int contactID;
        try
        {
            contactID = int.Parse(CurrentPrincipal.Claims.Where(c => c.Type == "ContactID").FirstOrDefault().Value.ToString());
        }
        catch
        {
            contactID = -1;
        }

        Cases = await _ICMSAPI.GetCaseList(_caseid, _appid, _casetypeid, _casestatusid, contactID,
                        CreateFromDateValue, CreateToDateValue, ModifyFromDateValue, ModifyToDateValue, 
                        ProfileID, FilterCustomerNameValue);
    }
    async Task ClearFilter()
    {
        await this.GateComboObj.Clear();
        await this.CategoryComboObj.Clear();
        await this.StatusComboObj.Clear();
        await this.ProfileComboObj.Clear();
        CreateFromDateValue = null;
        CreateToDateValue = null;
        ModifyFromDateValue = null;
        ModifyToDateValue = null;
        FilterCaseIDValue = null;
        FilterCustomerNameValue = null;
        OnlyActiveIsChecked = true;
    }

     public async Task RecordDoubleClickHandler(RecordDoubleClickEventArgs<Case> args)
    {
         await _storageService.SetItemAsync("CaseViewID", args.RowData.CaseID);

         NavigationManager.NavigateTo("/case/details", forceLoad: true);
    }

      private void onChangePlatform()
    {
        int intAppId;
        try
        {
            intAppId = int.Parse(appId);
        }
        catch
        {
            intAppId = -1;  
        }
       
        _Category = _filtersData.GetCategories(intAppId);
        _Profile = _filtersData.GetProfiles(intAppId);

    }

}
