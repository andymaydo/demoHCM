@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Logging
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Lists
@using System.Security.Claims
@using System.Globalization
@using AutoMapper
@using HCM.Pages.cases.DetailPage.Shared
@using System.IO
@using System.Xml


@if (ShowModal)
{
     @if (_loadingStatus == 0)
    {
        <p><em>Loading...</em></p>
    }
     @if (_loadingStatus == 1)
    {
        <SfDialog Width="650px" ShowCloseIcon="true" IsModal="true" AllowDragging="true" EnableResize="false" @bind-Visible="@ShowModal">
            <DialogEvents OnClose="@CloseDialog" ></DialogEvents>
            <DialogTemplates>
                <Header><div class="tLabel text-white">@Localizer.Str["MsgPanel_Confirm_Title"]</div></Header>
                <Content>
                    <p class="text-center">@ConfirmationMessage</p>
                </Content> 
                 <FooterTemplate>
                    <div class="text-center">
                        <SfButton OnClick="CloseDialog"   Content="@Localizer.Str["Button_Cancel"]" ></SfButton>
                        <SfButton OnClick="ConfirmAction" IsPrimary="true" Content="@Localizer.Str["Button_OK"]" ></SfButton>                
                    </div> 
                    <UiMessageBox Data="Messages.List"/>
                </FooterTemplate>
            </DialogTemplates>
           
        </SfDialog>
    }
    <style>
        .e-dialog.e-control.e-popup, .e-dialog.e-control.e-popup .e-dlg-header-content {
            background-color: @DialogBgColor;
        }
        .e-icon-dlg-close {
            color: white; 
        }
    </style>
}




@code {

    [Inject] private ILogger<StatusChangePopUp> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }


    [CascadingParameter(Name = "CurrentContactId")] protected int CurrentContactId { get; set; }
    [Parameter] public ProfileWizardVM ProfileVM { get; set; }
    [Parameter] public string NewStatus { get; set; }
    [Parameter] public bool ActivationAllowed { get; set; }
    [Parameter] public bool ShowModal { get; set; }
    [Parameter] public EventCallback<bool> ShowModalChanged { get; set; }
    [Parameter] public EventCallback OnDialogClosed { get; set; }

    protected UiMessages Messages { get; set; }
    protected int newStatusId { get; set; }
    protected string ConfirmationMessage { get; set; }
    protected string DialogBgColor { get; set; }
    private int _loadingStatus;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Messages = new UiMessages();  
        try
        {
            _loadingStatus = 0;

            if(ProfileVM == null )
            {               
                throw new ArgumentNullException("CurrentProfile");
            }
            if(string.IsNullOrEmpty(NewStatus))
            {               
                throw new ArgumentNullException("Status");
            }

            Init();

            _loadingStatus = 1;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);
            _loadingStatus = 2;
        }
    }


    public async Task CloseDialog()
    {
        ShowModal = false;
        await ShowModalChanged.InvokeAsync(ShowModal);
        await OnDialogClosed.InvokeAsync();
    }


    protected async Task ConfirmAction()
    {
        try
        {
            Messages.List.Clear();

            if(!ActivationAllowed && newStatusId == 1)
            {
                throw new Exception(@Localizer.Str["LicInfo_ProfilesErrMsg"]);
            }

            await ProfileVM.StatusUpdate(newStatusId,CurrentContactId);            

            await CloseDialog();
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message);

        }

    }  

    protected void Init()
    {

        switch (NewStatus)
        {
            case "Deleted":
                newStatusId = -1;
                ConfirmationMessage = @Localizer.Str["Profile_Delete_Confirm"];
                DialogBgColor = "darkred";
                break;

            case "InActive":
                newStatusId = 0;
                ConfirmationMessage = @Localizer.Str["Profile_Deactivate_Confirm"];
                DialogBgColor = "darkred";
                break;

            case "Active":
                newStatusId = 1;
                ConfirmationMessage = @Localizer.Str["Profile_Activate_Confirm"];
                DialogBgColor = "var(--primlight)";
                break;

            default:
                newStatusId = -2;
                DialogBgColor = "var(--primlight)";
                break;
        }
       
    }

   
}
