@page "/admin/profiles/ProfileList"
@attribute [Authorize]

@using HCMApi;
@using HCMApi.Models
@using HCMDataAccess;
@using HCMModels;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using System.Globalization


<h3>@Localizer.Str["Profile_List_Title"]</h3>

<div class="blue_bg"></div>
<h4>@Localizer.Str["Profile_List"]</h4>
<a href="" @onclick="@(() => showlDeleted = !showlDeleted)" @onclick:preventDefault class="btnEdit">
    @if (showlDeleted)
    {
        @Localizer.Str["Profile_DeleteProfile_hide"]
    }
    else
    {
        @Localizer.Str["Profile_DeleteProfile"]
    }    
</a>                             


@if (_loadingStatus == 0)
{
    <p><em>Loading...</em></p>
}

@if (_loadingStatus == 1)
{
    <div class="text-right mb-3">
        <SfButton @onclick="@(() => AddProfile())" CssClass="e-flat" IsPrimary="true" Content="@Localizer.Str["Profile_CreateNew"]" ></SfButton>
    </div>

    <SfGrid @ref="DefaultGrid" DataSource="@ProfileList" 
        AllowPaging="true" AllowResizing="false" AllowTextWrap="true"  
        AllowSorting="true" SelectedRowIndex="0">

        <GridEvents TValue="CMSProfileModel" DataBound="DataBoundHandler"></GridEvents> 
        <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>       
        <GridPageSettings PageSize="20"  PageSizes = "@pageSizeList"></GridPageSettings>
        <GridSortSettings>
            <GridSortColumns>
                <GridSortColumn Field="profileID" Direction="SortDirection.Descending"></GridSortColumn>
            </GridSortColumns>
        </GridSortSettings>

        <GridColumns>
            <GridColumn Field=@nameof(CMSProfileModel.profileID) IsPrimaryKey="true" HeaderText="@Localizer.Str["Profile_ProfileID"]" Width="80"></GridColumn>
            <GridColumn Field=@nameof(CMSProfileModel.appName) HeaderText="@Localizer.Str["Profile_Platform"]" ></GridColumn>
            <GridColumn Field=@nameof(CMSProfileModel.profileName) HeaderText="@Localizer.Str["Profile_ProfileName"]" ></GridColumn>            
            <GridColumn Field=@nameof(CMSProfileModel.profileStatus) HeaderText="@Localizer.Str["Profile_ProfileStatus"]" >
                <Template>
                @{
                    var _profile = (context as CMSProfileModel);
                    <div>@Localizer.Str["Profile_Status_" + _profile.profileStatusID.ToString()]</div>                     
                }
                </Template>
            </GridColumn>
             <GridColumn HeaderText="" Width=120>
                <Template>
                @{
                    var _profile = (context as CMSProfileModel);
                    if(_profile.profileStatusID == 1)
                    {
                       <div>
                             <a href="" @onclick="@(() => ChangeStatus(_profile, "InActive"))" @onclick:preventDefault class="btnEdit">@Localizer.Str["Action_DeActivate"]</a>                             
                        </div>
                    }
                    else if(_profile.profileStatusID == 0)
                    {
                       <div>
                             <a href="" @onclick="@(() => ChangeStatus(_profile, "Active"))" @onclick:preventDefault class="btnEdit">@Localizer.Str["Action_Activate"]</a>                             
                        </div> 
                    }    
                }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="" Width=100>
                <Template>
                @{
                    var _profile = (context as CMSProfileModel);
                    
                        <div>
                            <a href="" @onclick="@(() => EditProfile(_profile))" 
                                @onclick:preventDefault class="btnEdit">@Localizer.Str["Value_Edit_Text"]</a>                             
                        </div>                   
                }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="" Width=100>
                <Template>
                    @{
                        var _profile = (context as CMSProfileModel);
                        if (_profile.profileStatusID == 0 || _profile.profileStatusID == 1)
                        {
                            <div>
                                 <a href="" @onclick="@(() => CopyProfile(_profile))" 
                                    @onclick:preventDefault class="btnCopy">@Localizer.Str["Value_Copy_Text"]</a>                             
                            </div>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width=100>
                <Template>
                    @{
                        var _profile = (context as CMSProfileModel);
                        <div>                            
                             <a href="" @onclick="@(() => ChangeStatus(_profile, "Deleted"))" @onclick:preventDefault class="btnRemove">@Localizer.Str["Button_Del"]</a>
                        </div>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>

    @if (showlDeleted)
    {
        <div class="py-3"></div>        
        <h4>@Localizer.Str["Profile_Delete_List"]</h4>
        <div class="py-2"></div>

        <SfGrid DataSource="@DeletedProfileList" AllowPaging="true" AllowResizing="false" AllowTextWrap="true"  AllowSorting="true" >
            <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings> 
            <GridPageSettings PageSizes="true" ></GridPageSettings>
        
            <GridColumns>
                <GridColumn Field=@nameof(CMSProfileModel.profileID) HeaderText="@Localizer.Str["Profile_ProfileID"]" Width="80"></GridColumn>
                <GridColumn Field=@nameof(CMSProfileModel.appName) HeaderText="@Localizer.Str["Profile_Platform"]" ></GridColumn>
                <GridColumn Field=@nameof(CMSProfileModel.profileName) HeaderText="@Localizer.Str["Profile_ProfileName"]" ></GridColumn>            
                <GridColumn Field=@nameof(CMSProfileModel.profileStatus) HeaderText="@Localizer.Str["Profile_ProfileStatus"]" >
                     <Template>
                     @{
                        var _profile = (context as CMSProfileModel);
                    
                        <div style="color:darkgreen">@Localizer.Str["Profile_Status_" + _profile.profileStatusID.ToString()]</div>                        
                     
                    }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="" Width=120></GridColumn>
                <GridColumn HeaderText="" Width=100>
                    <Template>
                        @{
                            var _profile = (context as CMSProfileModel);
                            <div>
                                 <a href="" @onclick="@(() => ShowProfile(_profile))" @onclick:preventDefault class="btnEdit">@Localizer.Str["Value_Edit_Text"]</a>                             
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="" Width=100>
                    <Template>
                        @{
                            var _profile = (context as CMSProfileModel);
                            <div>
                                 <a href="" @onclick="@(() => CopyProfile(_profile))" @onclick:preventDefault class="btnCopy">@Localizer.Str["Value_Copy_Text"]</a>                             
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width=100></GridColumn>
            </GridColumns>
        </SfGrid> 
    }
    

}
<div class="py-3">
    <UiMessageBox Data="Messages.List" />
</div>


@if (showAddProfilePopUp)
{
    <AddProfilePopUp @bind-ShowModal="showAddProfilePopUp" 
        ProfileVM="@ProfileVM" 
        OnDialogClosed=@LoadProfileList>
    </AddProfilePopUp> 
}

@if (showEditProfilePopUp)
{
    <EditProfilePopUp @bind-ShowModal="showEditProfilePopUp" 
        ProfileVM="@ProfileVM" 
        OnDialogClosed=@LoadProfileList>
    </EditProfilePopUp> 
}

@if (showViewProfilePopUp)
{
    <ViewProfilePopUp @bind-ShowModal="showViewProfilePopUp" 
        ProfileVM="@ProfileVM">
    </ViewProfilePopUp> 
}

@if (showStatusChangePopUp)
{
    <StatusChangePopUp @bind-ShowModal="showStatusChangePopUp" 
        ProfileVM="@ProfileVM" 
        NewStatus = "@NewStatusName"
        OnDialogClosed=@LoadProfileList>
    </StatusChangePopUp> 
}

@code {
    [Inject] private ProfileWizardVM ProfileVM { get; set; }
    [Inject] private ICMSProfile ProfileService { get; set; }
    [Inject] private ILogger<ProfilePage> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }

    [CascadingParameter(Name = "CurrentContactId")] protected int CurrentContactId { get; set; }

    protected UiMessages Messages { get; set; }
    protected List<CMSProfileModel> ProfileList { get; set; }
    protected List<CMSProfileModel> DeletedProfileList { get; set; }

    protected CMSProfileModel CurrentProfile { get; set; }
    protected string NewStatusName { get; set; }
    protected bool showAddProfilePopUp { get; set; }
    protected bool showEditProfilePopUp { get; set; }
    protected bool showViewProfilePopUp { get; set; }
    protected bool showStatusChangePopUp { get; set; }
    protected bool showlDeleted { get; set; }
    private int _loadingStatus;
    private SfGrid<CMSProfileModel> DefaultGrid;
    private int[] pageSizeList { get; set; }
    private SfGridPosition currentGridPosition { get; set; }

    private int currentPage = 1;
    private bool repositionRequired;
    private double selectedRow { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();       
        Messages = new UiMessages();
        currentGridPosition = new SfGridPosition();
        pageSizeList = new int[] {5, 10, 20, 50, 100 };


        await LoadProfileList();
    }


    private async Task LoadProfileList()
    {
        _loadingStatus = 0;
        try
        {
            ProfileList = await ProfileService.GetList(null, null);           
            DeletedProfileList = await ProfileService.GetDeleteList(null);
            _loadingStatus = 1;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message);

            _loadingStatus = 2;
        }       
    }

    private async Task AddProfile()
    {
        try
        {
            await ProfileVM.AddNewProfileAsync(CurrentContactId, null, null, CultureInfo.CurrentCulture.Name);
            showAddProfilePopUp = true;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message);
        }  
    }

    private async Task EditProfile(CMSProfileModel profile)
    {
        try
        {
            currentGridPosition.PageNr = DefaultGrid.PageSettings.CurrentPage;
            currentGridPosition.RowIndex = await DefaultGrid.GetRowIndexByPrimaryKey(profile.profileID);
            repositionRequired = true;


            ProfileVM.LoadProfile(profile.profileID);
            showEditProfilePopUp = true;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message);
        } 

    }

    private void ShowProfile(CMSProfileModel profile)
    {
        try
        {
            ProfileVM.LoadProfile(profile.profileID);
            showViewProfilePopUp = true;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message);
        } 

    }

    private async Task CopyProfile(CMSProfileModel profile)
    {
        try
        {
            await ProfileVM.CopyProfileAsync(profile.profileID, CurrentContactId);
            showEditProfilePopUp = true;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message);
        } 
    }

    private async Task ChangeStatus(CMSProfileModel profile, string newStatus)
    {
        currentGridPosition.PageNr = DefaultGrid.PageSettings.CurrentPage;
        currentGridPosition.RowIndex = await DefaultGrid.GetRowIndexByPrimaryKey(profile.profileID);
        repositionRequired = true;

        ProfileVM.LoadProfile(profile.profileID);
        NewStatusName = newStatus;
        showStatusChangePopUp = true;
    }

    private async Task DataBoundHandler(object args)
    {       
        if(repositionRequired)
        {
            await DefaultGrid.GoToPage(currentGridPosition.PageNr);
            await DefaultGrid.SelectRow(currentGridPosition.RowIndex);
            repositionRequired = false;
        }
        
    }

}
