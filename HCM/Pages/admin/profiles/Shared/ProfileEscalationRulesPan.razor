@using Syncfusion.Blazor.Lists

<h5 class="tLabel2">@Title</h5>
<hr class="mb-2"/>
    
@if(Source?.Count > 0)
{            
    <table class="table @(ShowStriped && Source.Count > 2 ? "table-striped" : "") table-hover table-borderless table-sm">
        <thead class="itemDetail2">
            <tr>
              <td scope="col">@Localizer.Str["Profile_Step_Escalation_RuleList_Name"]</td>
              <td scope="col">@Localizer.Str["Profile_Step_Escalation_RuleList_Days"]</td>
              <td scope="col"></td>             
            </tr>
        </thead>
        <tbody class="itemDetail">

            @foreach (CaseRule c in Source)
            {
                <tr>                  
                    <td>                       
                        @Localizer.Str["Case_Status_" + c.CaseStatusID.ToString()]
                    </td> 
                    <td>                       
                        @c.CaseStatusDays
                    </td>
                    <td align="right">
                        @if (@AllowDelete)
                        {                        
                            <a href="" @onclick="@(() => DeleteFromList(c.CaseStatusID))" @onclick:preventDefault><span class="oi oi-trash"></span> @Localizer.Str["Button_Del"]</a>                        
                        }
                    </td>
                </tr>       
            }
            
        </tbody>
    </table>
}        
else
{
    <div class="itemDetail">@Localizer.Str["Value_NoData"]</div>
}        


@code {

    [Inject] private CommonLocalizationService Localizer { get; set; }


    [Parameter] public List<CaseRule> Source { get; set; }
    [Parameter] public string Title { get; set; }

    [Parameter] public bool ShowStriped { get; set; }
    [Parameter] public bool AllowDelete { get; set; }
    [Parameter] public EventCallback OnSorceItemDeleted { get; set; }

    protected async Task DeleteFromList(int cid)
    {
        Source.RemoveAll(r => r.CaseStatusID == cid);
        await OnSorceItemDeleted.InvokeAsync();
    }
   
}
