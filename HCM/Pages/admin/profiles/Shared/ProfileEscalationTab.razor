     
@using HCMDataAccess
@using HCMModels
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Logging
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.Navigations
@using System.Security.Claims
@using System.Globalization
@using AutoMapper
@using HCM.Pages.cases.DetailPage.Shared
@using static HCMModels.FiltersModels
        
@if (_loadingStatus == 0)
{
    <p><em>Loading...</em></p>
}
@if (_loadingStatus == 1)
{
    @if(RulesForm?.escalationRulesList?.Count > 0)
    {
        <div class="border border-1 bg-light p-2">
            <ProfileEscalationRulesPan Source="RulesForm.escalationRulesList" Title="@Localizer.Str["Profile_Step_Escalation_RuleList"]" 
                ShowStriped="true" AllowDelete="true"
                OnSorceItemDeleted = "InitStatusList">
            </ProfileEscalationRulesPan>
        </div>   
        <div class="col-12 py-2"></div>
    }

    <EditForm Model="@RulesForm" OnValidSubmit="AddCaseRule">
        <DataAnnotationsValidator />       
        <div class="row mb-3">             
            <div class="col-md-8">
                <label class="form-label">@Localizer.Str["Profile_Step_Escalation_RuleList_Name"]</label>
                <div>
                    <SfDropDownList TValue="string" TItem="CaseStatusModel" DataSource="@CaseStatusList" 
                        @bind-Value="@RulesForm.NewCaseStatusID"
                        Placeholder="@Localizer.Str["Value_Select_Text"]">
                        <DropDownListFieldSettings Text="CaseStatus" Value="CaseStatusID"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="col-md-3">
                <label class="form-label">@Localizer.Str["Profile_Step_Escalation_RuleList_Days"]</label>
                <div>
                    <SfNumericTextBox Min="1" TValue="int" @bind-Value="@RulesForm.NewCaseStatusDays"></SfNumericTextBox >
                </div>                    
            </div>
            <div class="col-md-1 text-end">
                <label class="form-label">&nbsp;</label>
                <div>
                    <SfButton>+</SfButton>
                </div>                        
            </div>                          
        </div>
    </EditForm> 
    
    <div class="col-12 py-3"></div>



    @if(ProfileContacts?.Count > 0)
    {
        <div class="border border-1 bg-light p-2">
            <CaseContactPan Source="ProfileContacts" Title="@Localizer.Str["Profile_Step3_TeilnehmerListe"]" 
                ShowEmail="true" ShowFunction="true" ShowRole="true" ShowStriped="true" AllowDelete="true"
                OnSorceItemDeleted = "LoadUserList">
            </CaseContactPan>
        </div> 
        <div class="col-12 py-2"></div>
    }

    <EditForm Model="@ContactsForm" OnValidSubmit="AddProfileContact">
        <DataAnnotationsValidator />       
        <div class="row mb-3">             
            <div class="col-md-8">
                <label class="form-label">@Localizer.Str["Profile_Step2_TeilnehmerAnlegen"]</label>
                <div>
                    <SfComboBox @ref="comboObj" TValue="string" TItem="UsersModel" 
                        DataSource="@UserList"  
                        @bind-Value="@ContactsForm.NewContactId"
                        Placeholder="@Localizer.Str["Value_Select_Text"]"  
                        AllowFiltering="true"
                        Autofill="false">
                        <ComboBoxTemplates TItem="UsersModel">
                            <HeaderTemplate>
                                <span class="head">
                                    <span class="login">@Localizer.Str["LoginLabel_UserName"]</span>
                                    <span class="name">@Localizer.Str["Cases_ChangeUsers_List_Name"]</span>

                                    <span class="func">@Localizer.Str["Cases_ChangeUsers_List_Devision"]</span>
                                </span>
                            </HeaderTemplate>
                            <ItemTemplate Context="ctx">
                                <span class="item">
                                    <span class="login">@((ctx  as UsersModel).LoginName)</span>
                                    <span class="name">@((ctx  as UsersModel).Name)</span>

                                    <span class="func">@((ctx  as UsersModel).FunctionInFirma)</span>
                                </span>
                            </ItemTemplate>
                        </ComboBoxTemplates>                                       

                        <ComboBoxFieldSettings Text="Name" Value="ContactID"></ComboBoxFieldSettings>
                        <ComboBoxEvents TValue="string" TItem="UsersModel" Filtering="OnFilter"></ComboBoxEvents>
                    </SfComboBox>

                </div>
            </div>
            <div class="col-md-3">
                <label class="form-label">@Localizer.Str["Cases_ChangeUsers_List_Role"]</label>
                <div>
                    <SfDropDownList TValue="string" TItem="ProfileRole" DataSource="@ProfileRoleList" 
                        @bind-Value="@ContactsForm.NewContactRole"
                        Placeholder="@Localizer.Str["Value_Select_Text"]">
                        <DropDownListFieldSettings Text="Description" Value="Key"></DropDownListFieldSettings>
                    </SfDropDownList>

                </div>                    
            </div>
            <div class="col-md-1 text-end">
                <label class="form-label">&nbsp;</label>
                <div>
                    <SfButton>+</SfButton>
                </div>                        
            </div>                          
        </div>
    </EditForm> 
    

    <hr class="col-md-12 mt-4 mb-2"/>
    <div class="col-md-12">
        <SfButton 
            
            OnClick="SaveEscalationForm" IsPrimary="true"  
            Content="@Localizer.Str["Button_Save"]" >
        </SfButton> 
    </div>         
}    


<UiMessageBox Data="Messages.List"/>


<style>
        
    .head, .item {
    display: table;
    width: 100%;
    margin: auto;
    }

    .head {
        height: 40px;
        font-size: 15px;
        font-weight: 600;
    }

    .name, .login, .func, .email {
        display: table-cell;
        vertical-align: middle;
        width: 25%;
    }

    .head .login {
        text-indent: 16px;
    }
</style>


@code {
    [Inject] private IUsersData UserService { get; set; }
    [Inject] private IFiltersData FilterService { get; set; }
    [Inject] private ILogger<ProfileEscalationTab> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }   
    [Inject] private IMapper _mapper { get; set; }


    [CascadingParameter(Name = "CurrentContactId")] protected int CurrentContactId { get; set; }

    [Parameter] public ProfileWizardVM ViewModel { get; set; }
    [Parameter] public EventCallback OnFormSaved { get; set; }

    protected ProfileEscalationContactsForm ContactsForm { get; set; }
    protected ProfileEscalationRulesForm RulesForm { get; set; }

    protected List<CaseContactSelectable> ProfileContacts { get; set; }
    protected List<UsersModel> UserList { get; set; }
    protected List<ProfileRole> ProfileRoleList { get; set; }
    protected SfComboBox<string, UsersModel> comboObj { get; set; }


    protected List<CaseStatusModel> CaseStatusList { get; set; }
    protected UiMessages Messages { get; set; }
    private int _loadingStatus;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            _loadingStatus = 0;

            if(ViewModel == null )
            {               
                throw new ArgumentNullException("CurrentProfile");
            }

            Messages = new UiMessages();

            ViewModel.InitForms();         

            ContactsForm = _mapper.Map<ProfileEscalationContactsForm>(ViewModel.EscalationContactsForm);
            RulesForm = _mapper.Map<ProfileEscalationRulesForm>(ViewModel.EscalationRulesForm);

            ProfileContacts = _mapper.Map<List<CaseContactSelectable>>(ViewModel.EscalationContactsForm.escalationUsersList);            

            InitRoleList();
            InitStatusList();
            await LoadUserList();


            _loadingStatus = 1;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

            _loadingStatus = 2;
        }

    }

    protected async Task LoadUserList()
    {
        try
        {
            var TotalUserList = await UserService.UsersList(CurrentContactId);
            UserList = TotalUserList
                    .Where(x=>!ProfileContacts.Any(y=>y.ContactID == x.ContactID))                                        
                    .ToList();
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

        }

    }
    protected void InitRoleList()
    {
        ProfileRoleList = new List<ProfileRole>()
        {
            new ProfileRole(){ Key = "User", Description = Localizer.Str["Profile_User_Role_1"] },
            new ProfileRole(){ Key = "Moderator", Description = Localizer.Str["Profile_User_Role_2"] },
            new ProfileRole(){ Key = "AliasManager", Description = Localizer.Str["Profile_User_Role_3"] }
        };

    }

    protected void InitStatusList()
    {
        try
        {
            var TotalStatusList = FilterService.GetStatusesForEscalation();
            CaseStatusList = TotalStatusList
                                .Where(x => !RulesForm.escalationRulesList.Any(y => y.CaseStatusID == x.CaseStatusID))
                                .ToList();

            foreach (CaseStatusModel status in CaseStatusList)
            {
                status.CaseStatus = Localizer.Str["Case_Status_" + status.CaseStatusID.ToString()];
            };
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

        }
    
    }

    private async Task AddProfileContact()
    {
        try
        {
            int cId;
            bool successfullyParsed = int.TryParse(ContactsForm.NewContactId, out cId);
            if (successfullyParsed)
            {
                var usr = UserList.Find(x => x.ContactID == cId);
                ProfileContacts.Add(new CaseContactSelectable()
                    {
                        ContactID = usr.ContactID,
                        Name = usr.Name,
                        Email = usr.EMail,
                        Function = usr.FunctionInFirma,
                        ProfileRole = ContactsForm.NewContactRole
                    });


                await LoadUserList();
                ContactsForm.NewContactId = null;
                ContactsForm.NewContactRole = null;
            }

        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"], ex.Message);
        }

    }

    private async Task AddCaseRule()
    {
        try
        {
            int sId;
            bool successfullyParsed = int.TryParse(RulesForm.NewCaseStatusID, out sId);
            if (successfullyParsed)
            {
                RulesForm.escalationRulesList.Add(new CaseRule()
                {
                    CaseStatusID = sId,
                    CaseStatusDays = RulesForm.NewCaseStatusDays                                      
                });

                InitStatusList();
                RulesForm.NewCaseStatusID = null;
                RulesForm.NewCaseStatusDays = 1;
            }

        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"], ex.Message);
        }
       
    }
    private async Task OnFilter(FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;

        var pre = new WhereFilter(); 
        var predicate = new List<WhereFilter>(){ 
                        new WhereFilter(){ Field = "Name", Operator = "contains", value = args.Text, IgnoreCase = true }, 
                        new WhereFilter(){ Field = "LoginName", Operator = "contains", value = args.Text, IgnoreCase = true },
                        new WhereFilter(){ Field = "EMail", Operator = "contains", value = args.Text, IgnoreCase = true }
        }; 
        pre = WhereFilter.Or(predicate); 

        var query = new Query().Where(pre);
              
        query = !string.IsNullOrEmpty(args.Text) ? query : new Query();

        await comboObj.Filter(UserList, query);
        
    }
 
    protected async Task SaveEscalationForm()
    {
        try
        {
            Messages.List.Clear();
            
            _mapper.Map(ProfileContacts, ViewModel.EscalationContactsForm.escalationUsersList);
            _mapper.Map(RulesForm.escalationRulesList, ViewModel.EscalationRulesForm.escalationRulesList);

            await ViewModel.SaveEscalation(CurrentContactId);

            await OnFormSaved.InvokeAsync();

        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message);

        }

    } 
}
