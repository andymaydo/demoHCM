@using HCMApi;

@using HCMDataAccess;
@using HCMModels;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using System.ComponentModel.DataAnnotations;

@inject IStringLocalizer<App> Localizer
@inject IFiltersData _filtersData;
@inject ILocalStorageService storageService
@inject ICaseContact _caseContact;
@inject ICMSProfile _CMSProfile;

@attribute [Authorize]


<h5 class="tLabel bottom_blue_bg">@Localizer["Profile_Step_Escalation"]</h5>

@*<h4 class="tLabel">@Localizer["Profile_Step_Escalation_RuleList"]</h4>*@

<div class="container">
    <div class="row row_padding mt-1">
        <div class="col-sm-12 form-inline control_padding">
            <h5 class="mt-1">@Localizer["Profile_Step_Escalation_RuleList"]</h5>
        </div>

    </div>
</div>

<SfGrid DataSource="@_caseRuleList" AllowPaging="false" AllowResizing="false" AllowTextWrap="true">
    <GridPageSettings PageSize="25"></GridPageSettings>
    <GridEvents CommandClicked="caseRuleList_OnCommandClicked" TValue="CaseRule"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(CaseRule.CaseStatusName) HeaderText="@Localizer["Profile_Step_Escalation_RuleList_Name"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="80"></GridColumn>
        <GridColumn Field=@nameof(CaseRule.CaseStatusDays) HeaderText="@Localizer["Profile_Step_Escalation_RuleList_Days"]" Width="150"></GridColumn>
        <GridColumn HeaderText="" Width="240">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat", Content=Localizer["Button_Del"]})"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

<div class="container mb-4 mt-4">
    <div class="row row_padding">
        <div class="col-sm-12 form-inline bottom_blue_bg_2 control_padding">
            <h5 class=" col-sm-12 control_padding">@Localizer["Profile_Step_Escalation_AddRule"]</h5>

        </div>

    </div>
</div>

<div class="container">
    <div class="row row_padding text-center">
        <div class="col-sm-12 control_padding">

            @*<h4 class="tLabel bottom_blue_bg">@Localizer["Profile_Step_Escalation_AddRule"]</h4>*@

            <EditForm Model="@_RuleValidation" OnValidSubmit="AddEscalation_Rule_Click">
                <DataAnnotationsValidator />
                <ValidationSummary></ValidationSummary>
                <div class="col-sm-12 form-inline control_padding">
                    <label class="col-sm-2 control_padding mylabel-left profilWizadrdText">@Localizer["Profile_Step_Escalation_RuleList_Name"]</label>
                    <div class="col-sm-4 control_padding">
                        <SfDropDownList @ref="@_CaseStatusObj" TValue="string" TItem="FiltersModels.CaseStatusModel" DataSource="@Statuses" @bind-Value="_RuleValidation.StatusID" @bind-text="_RuleValidation.StatusText">
                            <DropDownListFieldSettings Text="CaseStatus" Value="CaseStatusID"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                    <label class="col-sm-2 control_padding mylabel-left profilWizadrdText">@Localizer["Profile_Step_Escalation_RuleList_Days"]</label>
                    <div class="col-sm-3 control_padding">
                        <SfTextBox Value="@_RuleValidation.InDays" ValueChange="InDays_ValueChange">
                        </SfTextBox>
                    </div>
                    <div class="col-sm-1 control_padding">
                        
                        <SfButton CssClass="e-flat e-hcm-custom-btn col-sm-12" Type="submit" IsPrimary="true" Content="@Localizer["Button_Add"]"></SfButton>
                    </div>
                </div>
            </EditForm>

        </div>
    </div>
</div>


    <div class="row">
        <br />
    </div>

    @*<h4 class="tLabel">@Localizer["Profile_Step3_TeilnehmerListe"]</h4>*@

    <div class="container">
        <div class="row row_padding mt-1">
            <div class="col-sm-12 form-inline control_padding">
                <h5 class="mt-1">@Localizer["Profile_Step3_TeilnehmerListe"]</h5>
            </div>

        </div>
    </div>

    <SfGrid @ref="_caseEscalationUsersObj" DataSource="@_caseEscalationUsers" AllowPaging="false" AllowResizing="false" AllowTextWrap="true">
        <GridPageSettings PageSize="25"></GridPageSettings>
        <GridEvents CommandClicked="caseEscalationUsers_OnCommandClicked" TValue="CaseContact"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(CaseContact.Name) HeaderText="@Localizer["Cases_ChangeUsers_List_Name"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left"></GridColumn>
            <GridColumn Field=@nameof(CaseContact.Email) HeaderText="@Localizer["Cases_ChangeUsers_List_Email"]" Width="150"></GridColumn>
            <GridColumn Field=@nameof(CaseContact.Function) HeaderText="@Localizer["Cases_ChangeUsers_List_Devision"]"></GridColumn>
            <GridColumn Field=@nameof(CaseContact.ProfileRole) HeaderText="@Localizer["Cases_ChangeUsers_List_Role"]" Width="150"></GridColumn>
            <GridColumn HeaderText="" Width="150">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat", Content=Localizer["Button_Del"]})"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>



    <div class="container mb-4 mt-4">
        <div class="row row_padding">
            <div class="col-sm-12 form-inline bottom_blue_bg_2 control_padding">
                <h5 class=" col-sm-12 control_padding">@Localizer["Profile_Step3_TeilnehmerAnlegen"]</h5>

            </div>

        </div>
    </div>

    <div class="container">
        <div class="row row_padding text-center">
            <div class="col-sm-12 control_padding">

                @*<h4 class="tLabel bottom_blue_bg">@Localizer["Profile_Step3_TeilnehmerAnlegen"]</h4>*@

                <EditForm Model="@_CaseContactValidation" OnValidSubmit="AddNewUser_Click">
                    <DataAnnotationsValidator />
                    <div class="col-sm-12 form-inline control_padding">
                        <label class="col-sm-2 control_padding mylabel-left profilWizadrdText">@Localizer["Cases_ChangeUsers_FullUserList"]</label>
                        <div class="col-sm-4 control_padding">
                            <SfDropDownList @ref="_caseContactDropDownListObj" TValue="string" TItem="CaseContact" AllowFiltering="true" DataSource="@_caseContactList" @bind-Value="_CaseContactValidation.ContactID">
                                <DropDownListFieldSettings Text="Name" Value="ContactID"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <label class="col-sm-2 control_padding mylabel-left profilWizadrdText">@Localizer["Cases_ChangeUsers_List_Role"]</label>
                        <div class="col-sm-3 control_padding">
                            <SfDropDownList TValue="string" TItem="UserRolesModel" AllowFiltering="true" DataSource="@UserRolesList" @bind-Value="_CaseContactValidation.RoleName">
                                <DropDownListFieldSettings Text="LocalizerRoleName" Value="RoleName"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class="col-sm-1 control_padding">
        
                            <SfButton CssClass="e-flat e-hcm-custom-btn col-sm-12" Type="submit" IsPrimary="true" Content="@Localizer["Button_Add"]"></SfButton>
                        </div>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>




    <div class="container">
        <div class="row mt-3">
            <div class="col-sm-12 top_blue_bg">
                <div class="col-sm-12 form-inline control_padding">
                    <SfButton CssClass="e-flat e-hcm-custom-btn col-sm-2" IconCss="e-icons-hcm e-hcm-save" Content="@Localizer["Button_Save"]" @onclick="SaveStep_Click"></SfButton>
                </div>

            </div>
        </div>
    </div>

    @code {
        [Parameter]
        public EventCallback<int> OnChangeFormClick { get; set; }
        RuleValidation _RuleValidation = new RuleValidation();
        SfDropDownList<string, FiltersModels.CaseStatusModel> _CaseStatusObj;

        private List<CaseRule> _caseRuleList { get; set; }
        private List<CaseContact> _caseEscalationUsers = new List<CaseContact>();
        SfGrid<CaseContact> _caseEscalationUsersObj;
        CaseContactValidation _CaseContactValidation = new CaseContactValidation();
        public List<UserRolesModel> UserRolesList;
        protected SfDropDownList<string, CaseContact> _caseContactDropDownListObj;
        public List<CaseContact> _caseContactList = new List<CaseContact>();

        public class RuleValidation
        {

            public string StatusID { get; set; }
            public string StatusText { get; set; }
            [Required(ErrorMessageResourceName = "Profile_Validation_StatusDays", ErrorMessageResourceType = typeof(HcmRes))]
            public string InDays { get; set; }
        }
        public class CaseContactValidation
        {
            [Required(ErrorMessageResourceName = "Profile_Validation_User", ErrorMessageResourceType = typeof(HcmRes))]
            public string ContactID { get; set; }
            [Required(ErrorMessageResourceName = "Profile_Validation_Role", ErrorMessageResourceType = typeof(HcmRes))]
            public string RoleName { get; set; }
        }
        private List<FiltersModels.CaseStatusModel> Statuses
        {
            get
            {
                List<FiltersModels.CaseStatusModel> _Statuses = _filtersData.GetStatusesForEscalation();
                foreach (FiltersModels.CaseStatusModel status in _Statuses)
                {
                    status.CaseStatus = Localizer["Case_Status_" + status.CaseStatusID.ToString()];
                }
                return _Statuses;
            }
        }

        protected override async Task OnInitializedAsync()
        {
            _caseContactList = await _caseContact.Contact_GetAll();

            UserRolesList = new List<UserRolesModel>();
            UserRolesList.Add(new UserRolesModel()
            {
                RoleName = "User",
                LocalizerRoleName = Localizer["Profile_User_Role_1"]
            });
            UserRolesList.Add(new UserRolesModel()
            {
                RoleName = "Moderator",
                LocalizerRoleName = Localizer["Profile_User_Role_2"]
            });
            UserRolesList.Add(new UserRolesModel()
            {
                RoleName = "AliasManager",
                LocalizerRoleName = Localizer["Profile_User_Role_3"]
            });

            var ProfileStatusInfo = await storageService.GetItemAsync<StatusProfileModel>("ProfileStatusInfo");
            if (ProfileStatusInfo.cmsProfile.escalationRules != null && ProfileStatusInfo.cmsProfile.escalationRules.Count > 0)
            {
                _caseRuleList = new List<CaseRule>();
                foreach (CaseRule c in ProfileStatusInfo.cmsProfile.escalationRules)
                {
                    c.CaseStatusName = Localizer["Case_Status_" + c.CaseStatusID];
                    _caseRuleList.Add(c);
                }
            }
            if (ProfileStatusInfo.cmsProfile.escalationUsers != null && ProfileStatusInfo.cmsProfile.escalationUsers.Count > 0)
            {
                _caseEscalationUsers = ProfileStatusInfo.cmsProfile.escalationUsers;
            }

            StateHasChanged();
        }
        async Task caseRuleList_OnCommandClicked(CommandClickEventArgs<CaseRule> args)
        {
            if (args.CommandColumn.Type == CommandButtonType.Delete)
            {
                var ProfileStatusInfo = await storageService.GetItemAsync<StatusProfileModel>("ProfileStatusInfo");
                if (ProfileStatusInfo.cmsProfile.escalationRules != null && ProfileStatusInfo.cmsProfile.escalationRules.Count > 0)
                {
                    CaseRule _CaseRule = ProfileStatusInfo.cmsProfile.escalationRules.Where(c => c.CaseStatusID == args.RowData.CaseStatusID).FirstOrDefault();
                    if (_CaseRule != null)
                        ProfileStatusInfo.cmsProfile.escalationRules.Remove(_CaseRule);
                }

                await storageService.SetItemAsync("ProfileStatusInfo", ProfileStatusInfo);
                _caseRuleList = ProfileStatusInfo.cmsProfile.escalationRules;

                StateHasChanged();
            }
        }
        async Task caseEscalationUsers_OnCommandClicked(CommandClickEventArgs<CaseContact> args)
        {
            //if (args.CommandColumn.Type == CommandButtonType.Delete)
            //{
            //    var ProfileStatusInfo = await storageService.GetItemAsync<StatusProfileModel>("ProfileStatusInfo");
            //    if (ProfileStatusInfo.cmsProfile.escalationRules != null && ProfileStatusInfo.cmsProfile.escalationRules.Count > 0)
            //    {
            //        CaseRule _CaseRule = ProfileStatusInfo.cmsProfile.escalationRules.Where(c => c.CaseStatusID == args.RowData.CaseStatusID).FirstOrDefault();
            //        if (_CaseRule != null)
            //            ProfileStatusInfo.cmsProfile.escalationRules.Remove(_CaseRule);
            //    }

            //    await storageService.SetItemAsync("ProfileStatusInfo", ProfileStatusInfo);
            //    _caseRuleList = ProfileStatusInfo.cmsProfile.escalationRules;

            //    StateHasChanged();
            //}
        }

        protected override void OnAfterRender(bool firstRender)
        {
            if (firstRender)
            {
                StateHasChanged();
            }

        }

        private void InDays_ValueChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
        {
            _RuleValidation.InDays = args.Value;
            StateHasChanged();
        }

        async Task AddEscalation_Rule_Click()
        {
            var ProfileStatusInfo = await storageService.GetItemAsync<StatusProfileModel>("ProfileStatusInfo");
            CaseRule _CaseRule;
            if (ProfileStatusInfo.cmsProfile.escalationRules != null && ProfileStatusInfo.cmsProfile.escalationRules.Count > 0)
            {
                _CaseRule = ProfileStatusInfo.cmsProfile.escalationRules.Where(c => c.CaseStatusID == Convert.ToInt32(_RuleValidation.StatusID)).FirstOrDefault();
                if (_CaseRule != null)
                {
                    return;
                }
            }

            _CaseRule = new CaseRule();
            _CaseRule.CaseStatusID = Convert.ToInt32(_RuleValidation.StatusID);
            _CaseRule.CaseStatusDays = Convert.ToInt32(_RuleValidation.InDays);
            FiltersModels.CaseStatusModel _CaseStatusModel = _CaseStatusObj.GetItems().Where(c => c.CaseStatusID == Convert.ToInt32(_RuleValidation.StatusID)).FirstOrDefault();
            _CaseRule.CaseStatusName = _CaseStatusModel.CaseStatus;

            if (ProfileStatusInfo.cmsProfile.escalationRules == null)
            {
                ProfileStatusInfo.cmsProfile.escalationRules = new List<CaseRule>();
            }
            ProfileStatusInfo.cmsProfile.escalationRules.Add(_CaseRule);
            await storageService.SetItemAsync("ProfileStatusInfo", ProfileStatusInfo);
            _caseRuleList = ProfileStatusInfo.cmsProfile.escalationRules;

            StateHasChanged();
        }
        async Task AddNewUser_Click()
        {
            if (_caseEscalationUsers.Where(c => c.ContactID == Convert.ToInt32(_CaseContactValidation.ContactID)).Count() == 0)
            {
                CaseContact _CaseContact = _caseContactList.Where(c1 => c1.ContactID == Convert.ToInt32(_CaseContactValidation.ContactID)).FirstOrDefault();
                _CaseContact.ProfileRole = _CaseContactValidation.RoleName;
                _caseEscalationUsers.Add(_CaseContact);
                _caseEscalationUsersObj.Refresh();

                var ProfileStatusInfo = await storageService.GetItemAsync<StatusProfileModel>("ProfileStatusInfo");
                ProfileStatusInfo.cmsProfile.escalationUsers = _caseEscalationUsers;
                await storageService.SetItemAsync("ProfileStatusInfo", ProfileStatusInfo);

                StateHasChanged();
            }
        }
        async Task SaveStep_Click()
        {
            var ProfileStatusInfo = await storageService.GetItemAsync<StatusProfileModel>("ProfileStatusInfo");
            ProfileStatusInfo.Step = 4;
            await storageService.SetItemAsync("ProfileStatusInfo", ProfileStatusInfo);

            await _CMSProfile.UpdateEscalationAsync(ProfileStatusInfo.cmsProfile);
            await OnChangeFormClick.InvokeAsync(3);
        }
    }
