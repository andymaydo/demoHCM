@page "/admin/users/UserList"
@attribute [Authorize]

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using System.Security.Claims


<h3>@Localizer.Str["Menu_Users_List"]</h3>

<div class="blue_bg"></div>
<h5>@Localizer.Str["Administration_Users_List_Table_Title"]</h5>

<AuthorizeView Roles="admin,userCreate">
    <Authorized>
        <div class="text-end mb-3">
            <SfButton @onclick="@(() => showAddUserPopUp = true)" IsPrimary="true" Content="@Localizer.Str["Menu_Users_Create"]" ></SfButton>
        </div>
    </Authorized>
</AuthorizeView>


@if (_loadingStatus == 0)
{
    <p><em>Loading...</em></p>
}

@if (_loadingStatus == 1)
{
    <SfGrid DataSource="@UserList" AllowPaging="true" AllowResizing="false" AllowTextWrap="true"  AllowSorting="true" >
        <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings> 
        <GridPageSettings PageSizes="@pageSizes" PageSize="20" PageCount="3"></GridPageSettings>
        
        <GridColumns>
            <GridColumn Field=@nameof(UsersModel.LoginName) HeaderText="@Localizer.Str["Admin_Users_UserNameLabel"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="150">
                <Template>
                    @{
                        var _User = (context as UsersModel);
                        <div>
                            <div class="alink"  @onclick="@(() => EditUser(_User))"><span class="oi oi-zoom-in"></span> @_User.LoginName</div>                             
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(UsersModel.Name) HeaderText="@Localizer.Str["Admin_Users_RealNameLabel"]" Width="180"></GridColumn>
            <GridColumn Field=@nameof(UsersModel.FunctionInFirma) HeaderText="@Localizer.Str["Admin_Users_AbteilungLabel"]" Width="150"></GridColumn>
            <GridColumn Field=@nameof(UsersModel.EMail) HeaderText="@Localizer.Str["Admin_Users_EmailLabel"]" Width="180"></GridColumn>
            <GridColumn Field=@nameof(UsersModel.Status) HeaderText="@Localizer.Str["Admin_UsersIsApprovedLabel"]" DisplayAsCheckBox="true" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="80"></GridColumn>
            <GridColumn HeaderText="" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" Width=90>
                <Template>
                @{
                    var _User = (context as UsersModel);
                    @if(_User.ContactID != CurrentContactId)
                    {
                        <div>                            
                            <a href="" @onclick="@(() => DeleteUser(_User))" @onclick:preventDefault><span class="oi oi-trash"></span> @Localizer.Str["Button_Del"]</a>
                        </div> 
                    }
                        
                }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}
<UiMessageBox Data="Messages.List" />


@if (showAddUserPopUp)
{
    <AddUserPopUp @bind-ShowModal="showAddUserPopUp" OnFormSaved=@LoadUserList></AddUserPopUp> 
}

@if (showEditUserPopUp)
{
    <EditUserPopUp @bind-ShowModal="showEditUserPopUp" OnFormSaved=@LoadUserList UserModel="CurrentUser"></EditUserPopUp> 
}

@if (showDeleteUserPopUp)
{
    <DeleteUserPopUp @bind-ShowModal="showDeleteUserPopUp" OnFormSaved=@LoadUserList UserId="CurrentUser.UserID"></DeleteUserPopUp> 
}

@code {
    [Inject] private IUsersData UserService { get; set; }
    [Inject] private ILogger<UserPage> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private ISyncfusionStringLocalizer SfLocalizer { get; set; }

    [CascadingParameter(Name = "CurrentContactId")] protected int CurrentContactId { get; set; }
    [CascadingParameter(Name = "CurrentPrincipal")] protected ClaimsPrincipal CurrentPrincipal { get; set; }


    protected UiMessages Messages { get; set; }
    protected List<UsersModel> UserList { get; set; }
    protected UsersModel CurrentUser { get; set; }
    protected bool showAddUserPopUp { get; set; }
    protected bool showEditUserPopUp { get; set; }
    protected bool showDeleteUserPopUp { get; set; }
    private int _loadingStatus;
    private string[] pageSizes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();       
        Messages = new UiMessages();
        CurrentUser = new UsersModel();

        await LoadUserList();

    }


    private async Task LoadUserList()
    {
        _loadingStatus = 0;
        try
        {
            UserList = await UserService.UsersList(CurrentContactId);
            if(!(CurrentPrincipal.IsInRole("admin") || CurrentPrincipal.IsInRole("userCreate")))
            {
                UserList.RemoveAll(u => u.ContactID != CurrentContactId);
            }
            _loadingStatus = 1;
        }
        catch (Exception ex)
        {                        
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

            _loadingStatus = 2;
        }       
    }

    private void EditUser(UsersModel user)
    {
        CurrentUser = user;
        showEditUserPopUp = true;
    }

    private void DeleteUser(UsersModel user)
    {
        CurrentUser = user;
        showDeleteUserPopUp = true;
    }

    private void SetPageSizeDropDown()
    {
        List<string> pageList = new List<string>();
        pageList.Add(@SfLocalizer.GetText("Pager_All"));
        pageList.Add("10");
        pageList.Add("20");
        pageList.Add("50");
        pageList.Add("100");
        pageSizes = pageList.ToArray();
    }
}
