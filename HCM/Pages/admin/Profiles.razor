@page "/admin/profiles"

@using HCMApi;
@using HCMApi.Models;

@using HCMDataAccess;
@using HCMModels;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns

@inject IStringLocalizer<App> Localizer
@inject IFiltersData _filtersData;
@inject ICMSProfile _CMSProfile;
@inject NavigationManager NavManager;
@inject ILocalStorageService storageService;

@attribute [Authorize]

<h3 class="title">@Localizer["Profile_List_Title"]</h3>

<h4 class="tLabel bottom_blue_bg">@Localizer["Label_Filter"]</h4>

<div class="container">
    <div class="row row_padding">

        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Platform"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="GateComboObj" TValue="string" TItem="FiltersModels.GateModel" Placeholder="@Localizer["Value_All_Text"]">
                    <SfDataManager Url="api/FiltersData/GetGates" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                    <ComboBoxFieldSettings Text="appName" Value="appID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>

        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Profile_ProfileStatus"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="StatusComboObj" TValue="string" TItem="FiltersModels.ProfileStatusModel" Placeholder="@Localizer["Value_All_Text"]" DataSource="@Statuses">
                    <ComboBoxFieldSettings Text="ProfileStatus" Value="ProfileStatusID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>

    </div>

    <div class="row row_padding">
        <div class="col-sm-3 form-inline control_padding">

        </div>

        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">&nbsp;</label>
            <div class="col-sm-8 control_padding">
                <SfCheckBox @bind-Checked="ShowDeletedIsChecked" Label="@Localizer["Profile_DeleteProfile"]" ValueChange="@ShowDeleted_OnChange" TChecked="bool"></SfCheckBox>
            </div>
        </div>



    </div>

    <div class="row">
        <hr style="background-color: #ABC3D7;height:1px;width:100%" />
    </div>

    <div class="row">
        <div class="col-sm">
            <SfButton CssClass="e-flat" IsPrimary="true" IconCss="e-icons-hcm e-hcm-search" Content="@Localizer["Button_Filter"]" IsToggle="true" @onclick="onGo_Click"></SfButton>
            <SfButton CssClass="e-flat" IsPrimary="true" Content="@Localizer["Button_Filter_Reset"]" IsToggle="true" @onclick="ClearFilter"></SfButton>
        </div>
    </div>



</div>

<div class="container">
    <div class="row row_padding blue_bg mt-3">
        <div class="col-sm-3 form-inline control_padding">
            <h4 class="mt-1">@Localizer["Profile_List"]</h4>

        </div>
        <div class="col-sm-7 form-inline control_padding">
            &nbsp;
        </div>
        <div class="col-sm-2 control_padding text-right">
            <SfButton CssClass="e-flat" IsPrimary="true" Content="@Localizer["Profile_CreateNew"]" @onclick="onCreateNew_Click"></SfButton>
        </div>

    </div>
</div>

<SfGrid DataSource="@ProfileList" AllowPaging="true" AllowResizing="false" AllowTextWrap="true">
    <GridPageSettings PageSize="25"></GridPageSettings>
    <GridEvents CommandClicked="OnCommandClicked" TValue="CMSProfile"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(CMSProfile.profileID) HeaderText="@Localizer["Profile_ProfileID"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="80"></GridColumn>
        <GridColumn Field=@nameof(CMSProfile.appName) HeaderText="@Localizer["Profile_Platform"]" Width="150"></GridColumn>
        <GridColumn Field=@nameof(CMSProfile.profileName) HeaderText="@Localizer["Profile_ProfileName"]"></GridColumn>
        <GridColumn Field=@nameof(CMSProfile.profileStatus) HeaderText="@Localizer["Profile_ProfileStatus"]" Width="150"></GridColumn>
        <GridColumn HeaderText="" Width="340">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.None" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-copy", CssClass="e-flat", Content=Localizer["Value_Copy_Text"]})"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat", Content=Localizer["Value_Edit_Text"]})"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    SfComboBox<string, FiltersModels.GateModel> GateComboObj;
    SfComboBox<string, FiltersModels.ProfileStatusModel> StatusComboObj;
    private bool ShowDeletedIsChecked = true;
    //private string _NoItemSelected = Localizer["Value_All_Text"];
    private List<CMSProfile> ProfileList { get; set; }

    private List<FiltersModels.ProfileStatusModel> Statuses
    {
        get
        {
            List<FiltersModels.ProfileStatusModel> _Statuses = _filtersData.GetProfileStatuses();
            if (_Statuses != null)
            {
                foreach (FiltersModels.ProfileStatusModel status in _Statuses)
                {
                    status.ProfileStatus = Localizer[status.ProfileStatus.ToString()];
                }
            }
            return _Statuses;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ProfileList = await _CMSProfile.GetList(null, null);
    }

    async Task onGo_Click()
    {
        int? _appid = null;
        try
        {
            if (!string.IsNullOrEmpty(GateComboObj.Value))
                _appid = Convert.ToInt32(GateComboObj.Value);
        }
        catch { };
        int? _profilestatusid = null;
        try
        {
            if (!string.IsNullOrEmpty(StatusComboObj.Value))
                _profilestatusid = Convert.ToInt32(StatusComboObj.Value);
        }
        catch { };
        ProfileList = await _CMSProfile.GetList(_appid, _profilestatusid);
    }
    async Task ClearFilter()
    {
    }
    async Task onCreateNew_Click()
    {
        var ProfileStatusInfo = new StatusProfileModel()
        {
            Step = 1,
            cmsProfile = new CMSProfileModel()
        };

        ProfileStatusInfo.cmsProfile.profileID = -1;

        await storageService.SetItemAsync("ProfileStatusInfo", ProfileStatusInfo);

        NavManager.NavigateTo("/admin/profiles/step1");
    }
    private void ShowDeleted_OnChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        ShowDeletedIsChecked = args.Checked;
        StateHasChanged();
    }

    public async Task OnCommandClicked(CommandClickEventArgs<CMSProfile> args)
    {
        if (args.CommandColumn.Type == CommandButtonType.Edit)
        {
            CMSProfileModel _cmsProfile = _CMSProfile.Load(args.RowData.profileID);

            var ProfileStatusInfo = new StatusProfileModel()
            {
                Step = 1,
                cmsProfile = _cmsProfile
            };

            await storageService.SetItemAsync("ProfileStatusInfo", ProfileStatusInfo);

            NavManager.NavigateTo("/admin/profiles/step1");

        }
        if (args.CommandColumn.Type == CommandButtonType.None)
        {
            var _UsersModel = await storageService.GetItemAsync<UsersModel>("User");
            CMSProfileModel _cmsProfile = await _CMSProfile.ProfilCopy(args.RowData.profileID, _UsersModel.ContactID);

            var ProfileStatusInfo = new StatusProfileModel()
            {
                Step = 5,
                cmsProfile = _cmsProfile
            };

            await storageService.SetItemAsync("ProfileStatusInfo", ProfileStatusInfo);

            NavManager.NavigateTo("/admin/profiles/step1");
        }
    }
}
