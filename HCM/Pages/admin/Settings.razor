@page "/admin/settings"

@using Syncfusion.Blazor.Popups
@using HCMDataAccess;
@using HCMModels;

@inject IStringLocalizer<App> Localizer
@inject ISettingsData _settingsData;
@inject ILocalStorageService storageService

@attribute [Authorize]


<h3 class="title">@Localizer["Administration_Settings_Title"]</h3>

<div class="container">
    <div class="row row_padding blue_bg mt-3">
        <div class="col-sm-12 form-inline control_padding">
            <h5 class="mt-1">@Localizer["SMTP_1"]</h5>

        </div>

    </div>
</div>




<div class="container">

    <EditForm EditContext="_SettingsEditContext"  OnValidSubmit="onSave_Click">

        <div class="row row_padding">
            <div class="col-sm-5 form-inline control_padding">
                <label class="col-sm-3 control_padding">@Localizer["SMTP_2"]</label>
                <div class="col-sm-7 control_padding">
                    <SfTextBox Placeholder="@Localizer["SMTP_2"]" @bind-Value="@_SettingsModel.SMTPServer">
                    </SfTextBox>
                </div>
                <div class="col-md-2 profilWizadrdText"><ValidationMessage For="@(() => _SettingsModel.SMTPServer)" /> </div>
            </div>
        </div>
        <div class="row row_padding">
            <div class="col-sm-5 form-inline control_padding">
                <label class="col-sm-3 control_padding">@Localizer["SMTP_3"]</label>
                <div class="col-sm-3 control_padding">
                    <SfTextBox @ref="SmtpServerPortID" Placeholder="@Localizer["SMTP_3"]" Value="@SmtpServerPortValue" ValueChange="SmtpServerPort_ValueChange">
                    </SfTextBox>
                </div>
            </div>
        </div>
        <div class="row row_padding">
            <div class="col-sm-5 form-inline control_padding">
                <label class="col-sm-3 control_padding">&nbsp;</label>
                <div class="col-sm-9 control_padding">
                    <SfCheckBox @bind-Checked="SmtpServerAuth" Label="@Localizer["SMTP_4"]" ValueChange="@SmtpServerAuth_OnChange" TChecked="bool"></SfCheckBox>
                </div>
            </div>
        </div>
        <div class="row row_padding">
            <div class="col-sm-5 form-inline control_padding">
                <label class="col-sm-3 control_padding">&nbsp;</label>
                <label class="col-sm-3 control_padding">@Localizer["SMTP_5"]</label>
                <div class="col-sm-6 control_padding">
                    <SfTextBox @ref="SmtpServerAuthUserID" Placeholder="@Localizer["SMTP_5"]" Value="@SmtpServerAuthUser" ValueChange="SmtpServerAuthUser_ValueChange">
                    </SfTextBox>
                </div>
            </div>
        </div>
        <div class="row row_padding">
            <div class="col-sm-5 form-inline control_padding">
                <label class="col-sm-3 control_padding">&nbsp;</label>
                <label class="col-sm-3 control_padding">@Localizer["SMTP_6"]</label>
                <div class="col-sm-6 control_padding">
                    <SfTextBox @ref="SmtpServerAuthPwdID" Placeholder="@Localizer["SMTP_6"]" Value="@SmtpServerAuthPwd" ValueChange="SmtpServerAuthPwd_ValueChange">
                    </SfTextBox>
                </div>
            </div>
        </div>

        <div class="row">
            <hr style="background-color: #ABC3D7;height:1px;width:100%" />
        </div>

        <div class="row">
            <div class="col-sm-12">
                <SfButton CssClass="e-flat e-hcm-custom-btn col-sm-2" IconCss="e-icons-hcm e-hcm-save" 
                          IsPrimary="true" Content="@Localizer["Button_Save"]" Type="submit" ></SfButton>
            </div>
        </div>

    </EditForm>

    <SfDialog Header="@ErrDialogHeader" Content="@ErrDialogContent" @ref="ErrDialogID" Width="335px" IsModal="true" @bind-Visible="ErrDialogVisibility">
        <DialogTemplates>

        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" OnClick="@DlgButtonClick" />
        </DialogButtons>
        @*<DialogEvents OnOpen="@DialogOpen" Closed="@DialogClose" OnOverlayClick="@OverlayClick"></DialogEvents>*@
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
</div>

@code {


    SfTextBox SmtpServerPortID;
    public string SmtpServerPortValue { get; set; }
    int smtpPort = 25;

    private bool SmtpServerAuth = true;

    SfTextBox SmtpServerAuthUserID;
    public string SmtpServerAuthUser { get; set; }

    SfTextBox SmtpServerAuthPwdID;
    public string SmtpServerAuthPwd { get; set; }

    private bool ErrDialogVisibility { get; set; } = false;
    SfDialog ErrDialogID;
    private string ErrDialogHeader { get; set; }
    private string ErrDialogContent { get; set; }

    SettingsModel _SettingsModel = new SettingsModel();
    private ValidationMessageStore? messageStore;
    private EditContext _SettingsEditContext;

    private void SmtpServer_ValueChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        //SmtpServerValue = args.Value;
        _SettingsModel.SMTPServer = args.Value;
        StateHasChanged();
    }
    private void SmtpServerPort_ValueChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        SmtpServerPortValue = args.Value;
        StateHasChanged();
    }
    private void SmtpServerAuth_OnChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        SmtpServerAuth = args.Checked;
        StateHasChanged();
    }
    private void SmtpServerAuthUser_ValueChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        SmtpServerAuthUser = args.Value;
        StateHasChanged();
    }
    private void SmtpServerAuthPwd_ValueChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        SmtpServerAuthPwd = args.Value;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _SettingsEditContext = new(_SettingsModel);
        _SettingsEditContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(_SettingsEditContext);

        List<SettingsModel> _Settings = await _settingsData.GetSettings();
        if (_Settings != null && _Settings.Count > 0)
        {
            _SettingsModel.SMTPServer = _Settings[0].SMTPServer;
            SmtpServerPortValue = _Settings[0].SMTPServerPort;
            SmtpServerAuth = _Settings[0].SMTPServerAuth;
            SmtpServerAuthUser = _Settings[0].SMTPServerUser;
            SmtpServerAuthPwd = _Settings[0].SMTPServerPass;
        }


    }

    private void HandleValidationRequested(object sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        if (_SettingsModel?.SMTPServer == "")
        {
            messageStore?.Add(() => _SettingsModel.SMTPServer, Localizer["SMTP_9"]);
        }
    }


    private void DlgButtonClick()
    {
        this.ErrDialogVisibility = false;
    }

    async Task onSave_Click()
    {

        //if (string.IsNullOrEmpty(SmtpServerValue))
        //{
        //    ErrDialogHeader = Localizer["MsgPanel_Error_Title"];
        //    ErrDialogContent = "<p>" + Localizer["SMTP_9"] + "</p>";
        //    this.ErrDialogVisibility = true;
        //    return;
        //}
        if (string.IsNullOrEmpty(SmtpServerPortValue))
        {
            ErrDialogHeader = Localizer["MsgPanel_Error_Title"];
            ErrDialogContent = "<p>" + Localizer["SMTP_10"] + "</p>";
            this.ErrDialogVisibility = true;
            return;
        }
        if (!Int32.TryParse(SmtpServerPortValue, out smtpPort))
        {
            ErrDialogHeader = Localizer["MsgPanel_Error_Title"];
            ErrDialogContent = "<p>" + Localizer["SMTP_10"] + "</p>";
            this.ErrDialogVisibility = true;
            return;
        }

        if (SmtpServerAuth)
        {
            if (string.IsNullOrEmpty(SmtpServerAuthUser))
            {
                ErrDialogHeader = Localizer["MsgPanel_Error_Title"];
                ErrDialogContent = "<p>" + Localizer["SMTP_11"] + "</p>";
                this.ErrDialogVisibility = true;
                return;
            }
            if (string.IsNullOrEmpty(SmtpServerAuthPwd))
            {
                ErrDialogHeader = Localizer["MsgPanel_Error_Title"];
                ErrDialogContent = "<p>" + Localizer["SMTP_12"] + "</p>";
                this.ErrDialogVisibility = true;
                return;
            }
        }

        UsersModel _userInfo = await storageService.GetItemAsync<UsersModel>("User");
        int resul = await _settingsData.ChangeSettings(_userInfo.UserID, _SettingsModel.SMTPServer, smtpPort, SmtpServerAuth, SmtpServerAuthUser, SmtpServerAuthPwd);

        if (resul == 0)
        {
            ErrDialogHeader = Localizer["MsgPanel_Success_Title"];
            ErrDialogContent = "<p>" + Localizer["SMTP_8"] + "</p>";
            this.ErrDialogVisibility = true;
        }
        else
        {
            ErrDialogHeader = Localizer["MsgPanel_Error_Title"];
            ErrDialogContent = "<p>" + Localizer["MsgPanel_Error_Title"] + "</p>";
            this.ErrDialogVisibility = true;
        }
    }
}
