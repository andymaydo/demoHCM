@using HCMApi;

@using HCMDataAccess;
@using HCMModels;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using System.ComponentModel.DataAnnotations;

@inject IStringLocalizer<App> Localizer
@inject IFiltersData _filtersData;
@inject ILocalStorageService storageService
@inject ICaseContact _caseContact;
@inject ICMSProfile _CMSProfile;

@attribute [Authorize]


<h5 class="tLabel bottom_blue_bg">@Localizer["Profile_Step_Status"] (@_CMSProfileModel?.profileName)</h5>

<div class="container">
    <div class="row row_padding mt-1">
        <div class="col-sm-12 form-inline control_padding">
            <h5 class="mt-1">@Localizer["Profile_ProfileStatus"]</h5>
        </div>

    </div>
</div>

<EditForm Model="@_StatusValidation" OnValidSubmit="SaveStep_Click">
    <DataAnnotationsValidator />
    <div class="row row_padding">
        <div class="col-sm-3 control_padding">
            @*<h5 class="tLabel">@Localizer["Profile_ProfileStatus"] </h5>*@
        </div>
        <div class="col-sm-6 control_padding">


            <SfRadioButton @bind-Checked="@_StatusValidation.StatusText" Label="@Localizer["Profile_Status_Active"]" @onclick="@(() => ChangeStatus("Active"))" Name="Status" Value="Active"></SfRadioButton>
            <br />
            <SfRadioButton @bind-Checked="@_StatusValidation.StatusText" Label="@Localizer["Profile_Status_InActive"]" @onclick="@(() => ChangeStatus("InActive"))" Name="Status" Value="InActive"></SfRadioButton>
            <br />
            <SfRadioButton @bind-Checked="@_StatusValidation.StatusText" Label="@Localizer["Profile_Status_Delete"]" @onclick="@(() => ChangeStatus("Delete"))" Name="Status" Value="Delete"></SfRadioButton>
            <br />
            <HcmCustomValidator @ref="customValidator" />
            <SfTextBox @ref="DeleteTextObj" CssClass="e-hcm-custom-textarea" @bind-Value="@_StatusValidation.DeleteStatusText" Multiline="true" Enabled=@deleteTextBoxStatus>
            </SfTextBox>
            <ValidationMessage For="@(()=>_StatusValidation.DeleteStatusText)" />

            @*<div class="form-group">
                    <label for="EmailAddress">Email address</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">@@</span>
                        </div>
                        <SfTextBox @ref="DeleteTextObj" @bind-Value="@_StatusValidation.DeleteStatusText" Multiline="true" Enabled=@deleteTextBoxStatus>
                        </SfTextBox>

                    </div>
                </div>*@

        </div>
    </div>


    <div class="container">
        <div class="row mt-3">
            <div class="col-sm-12 top_blue_bg">
                <div class="col-sm-12 form-inline control_padding">
                    <SfButton CssClass="e-flat e-hcm-custom-btn col-sm-2" IconCss="e-icons-hcm e-hcm-save" Type="submit" IsPrimary="true" Content="@Localizer["Button_Save"]" IsToggle="true"></SfButton>
                </div>

            </div>
        </div>
    </div>


</EditForm>


    @code {
        [Parameter]
        public EventCallback<int> OnChangeFormClick { get; set; }
        HCMApi.Models.CMSProfileModel _CMSProfileModel;
        SfTextBox DeleteTextObj;

        public string deleteText { get; set; }
        public bool deleteTextBoxStatus { get; set; } = true;

        StatusValidation _StatusValidation { get; set; } = new StatusValidation{ StatusID=0,DeleteStatusText="",StatusText=""};
        public class StatusValidation
        {

            public int StatusID { get; set; }
            public string StatusText { get; set; }
            //[Required(ErrorMessageResourceName = "Profile_Validation_Delete_Profil", ErrorMessageResourceType = typeof(HcmRes))]
            public string DeleteStatusText { get; set; }
        }
        private HcmCustomValidator customValidator;



        protected override async Task OnInitializedAsync()
        {
            var ProfileStatusInfo = await storageService.GetItemAsync<StatusProfileModel>("ProfileStatusInfo");
            if (ProfileStatusInfo.cmsProfile != null)
            {
                _CMSProfileModel = ProfileStatusInfo.cmsProfile;
                _StatusValidation.DeleteStatusText = _CMSProfileModel.ReasonToDelete;
                _StatusValidation.StatusID = _CMSProfileModel.profileStatusID;
                _StatusValidation.StatusText = _CMSProfileModel.profileStatus;
            }

        }

        private void ChangeStatus(string status)
        {
            _StatusValidation.StatusText = status;
            if (_StatusValidation.StatusText == "Delete")
            {
                deleteTextBoxStatus = true;
                _StatusValidation.StatusID = -1;
            }
            else
            {
                deleteTextBoxStatus = false;
                _StatusValidation.StatusID = (status == "Active" ? 1:0);
            }
            StateHasChanged();
        }
        async Task SaveStep_Click()
        {
            customValidator.ClearErrors();

            var errors = new Dictionary<string, List<string>>();

            if (_StatusValidation.StatusText == "Delete" && string.IsNullOrEmpty(_StatusValidation.DeleteStatusText))
            {
                errors.Add(nameof(_StatusValidation.DeleteStatusText),
                    new List<string>() { Localizer["Profile_Validation_Delete_Profil"] });
            }

            if (errors.Count() > 0)
            {
                customValidator.DisplayErrors(errors);
            }
            else
            {
                var ProfileStatusInfo = await storageService.GetItemAsync<StatusProfileModel>("ProfileStatusInfo");
                ProfileStatusInfo.Step = 5;

                ProfileStatusInfo.cmsProfile.profileStatusID = _StatusValidation.StatusID;
                ProfileStatusInfo.cmsProfile.profileStatus = _StatusValidation.StatusText;
                ProfileStatusInfo.cmsProfile.ReasonToDelete = _StatusValidation.DeleteStatusText;

                await storageService.SetItemAsync("ProfileStatusInfo", ProfileStatusInfo);

                await _CMSProfile.UpdateStatusAsync(ProfileStatusInfo.cmsProfile);
                await OnChangeFormClick.InvokeAsync(4);
            }



        }





    }
