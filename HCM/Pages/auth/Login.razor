@page "/auth/login"

@layout AuthLayout

@using Syncfusion.Blazor.Inputs
@using HCMDataAccess;
@using HCMModels;

@inject ILoginData loginData
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider  authenticationStateProvider


@inject NavigationManager NavigationManager
@inject IConfiguration Configuration




<EditForm Model="loginModel" OnValidSubmit="LoginUser">




    <div class="row justify-content-sm-center mt-4">

        <div class="row col-sm-4 justify-content-sm-center border">

            <div class="col-sm-12 form-inline m-sm-2">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>

            <div class="col-sm-12 form-inline m-sm-2">
                <label class="col-sm-4 form_name">Email:</label>
                <div class="col-sm-8">
                    <SfTextBox @bind-Value="@loginModel.UserName">
                    </SfTextBox>
                </div>
            </div>
            <div class="col-sm-12 form-inline m-sm-2">
                <label class="col-sm-4 form_name">Password:</label>
                <div class="col-sm-8">
                    <SfTextBox @bind-Value="@loginModel.Password">
                    </SfTextBox>
                </div>
            </div>
            <div class="col-sm-12 form-inline m-sm-2">
                <label class="col-sm-4 form_name">Sprache:</label>
                <div class="col-sm-8">
                    <select class="form-control mr-2 col-sm-12" @bind="selectedCulture">
                        @foreach (var culture in cultures)
                        {
                            <option value="@culture.Key">@culture.Value</option>
                        }
                    </select>
                </div>
            </div>

            <hr />

            <div class="col-sm-12 form-inline m-sm-2">
                <label class="col-sm-4 filter_title">&nbsp;</label>
                <div class="col-sm-8">
                    <SfButton Type="submit" IsPrimary="true" IconCss="e-icons-hcm e-hcm-login" CssClass="e-flat e-info col-sm-12">Login</SfButton>
                </div>
            </div>


        </div>

    </div>


</EditForm>






@code {
    LoginRequest loginModel = new LoginRequest();
    private string selectedCulture = System.Threading.Thread.CurrentThread.CurrentCulture.Name;
    private Dictionary<string, string> cultures;

    //bool isBusy = false;

    protected override void OnInitialized()
    {
        cultures = Configuration.GetSection("Cultures")
            .GetChildren().ToDictionary(x => x.Key, x => x.Value);
        selectedCulture = "de-DE";
    }

    public async Task LoginUser()
    {
        LoginResponse _LoginResponse = await loginData.Login(loginModel.UserName, loginModel.Password);

        if (_LoginResponse.Success)
        {
            var userInfo = new UsersModel()
            {
                FullName = _LoginResponse.FullName,
                NickName = _LoginResponse.NikName,
                ContactID = _LoginResponse.ContactID,
                UserID = _LoginResponse.UserID,
                EMail = _LoginResponse.EMail,
                //ContactURI = _LoginResponse.ContactURI,
                //ForeingID = _LoginResponse.ForeingID,
                Name = _LoginResponse.Name,
                ContactData = _LoginResponse.ContactData,
                LoginName = loginModel.UserName
            };

            await storageService.SetItemAsync("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();

            var uri = new Uri(NavigationManager.Uri)
            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);

            var query = $"?culture={Uri.EscapeDataString(selectedCulture)}&" +
                $"redirectUri={Uri.EscapeDataString(uri)}";

            //NavigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);

            NavigationManager.NavigateTo("/");
        }
        else
        {
            NavigationManager.NavigateTo("/auth/login");
        }

    }
}
