@page "/reports/reports"

@using HCMApi;
@using HCM.Data;
@using HCMDataAccess;
@using HCMDataAccess.Models;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns

@inject ICMSAPI _ICMSAPI;
@inject IStringLocalizer<App> Localizer
@inject IFiltersData _filtersData;
@inject ILocalUserData _localUserData;
@inject ILocalStorageService storageService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<h3>@Localizer["Reports_Title"]</h3>

<h4 class="tLabel bottom_blue_bg">@Localizer["Label_Filter"]</h4>

<div class="container">
    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3 control_padding">@Localizer["Label_Filter_Case_Created"]</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker @ref="CreateFromDateObj" TValue="DateTime?" Value='@CreateFromDateValue' StrictMode=true ShowTodayButton="false">
                    <DatePickerEvents TValue="DateTime?" ValueChange="@CreateFromDate_OnChange"></DatePickerEvents>
                </SfDatePicker>
            </div>

            <label class="col-sm-1 control_padding">-</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker @ref="CreateToDateObj" TValue="DateTime?" Value='@CreateToDateValue' StrictMode=true ShowTodayButton="false">
                    <DatePickerEvents TValue="DateTime?" ValueChange="@CreateToDate_OnChange"></DatePickerEvents>
                </SfDatePicker>
            </div>
        </div>
        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Platform"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="GateComboObj" TValue="string" TItem="FiltersModels.GateModel" ShowClearButton="false" @bind-Index="@GateDefaultIndex" DataSource="@_Gates">
                    @*<SfDataManager Url="api/FiltersData/GetGates" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>*@
                    <ComboBoxEvents TItem="FiltersModels.GateModel" TValue="string" ValueChange="onChangePlatform"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="appName" Value="appID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_CaseID"]</label>
            <div class="col-sm-8 control_padding">
                <SfTextBox @ref="FilterCaseIDObj" Placeholder="@Localizer["Label_Filter_Case_CaseID"]" Value="@FilterCaseIDValue" ValueChange="FilterCaseID_ValueChange">
                </SfTextBox>
            </div>
        </div>
    </div>

    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3 control_padding">@Localizer["Label_Filter_Case_Modify"]</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker @ref="ModifyFromDateObj" TValue="DateTime?" Value='@ModifyFromDateValue' StrictMode=true ShowTodayButton="false">
                    <DatePickerEvents TValue="DateTime?" ValueChange="@ModifyFromDate_OnChange"></DatePickerEvents>
                </SfDatePicker>
            </div>

            <label class="col-sm-1 control_padding">-</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker @ref="ModifyToDateObj" TValue="DateTime?" Value='@ModifyToDateValue' StrictMode=true ShowTodayButton="false">
                    <DatePickerEvents TValue="DateTime?" ValueChange="@ModifyToDate_OnChange"></DatePickerEvents>
                </SfDatePicker>
            </div>
        </div>
        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_ProfileID"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="ProfileComboObj" TValue="string" TItem="FiltersModels.ProfileModel" ShowClearButton="false" @bind-Index="@ProfileDefaultIndex" DataSource="@_Profile">
                    <ComboBoxEvents TItem="FiltersModels.ProfileModel" TValue="string" ValueChange="onChangeProfile"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="ProfileName" Value="ProfileID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_CustomerName"]</label>
            <div class="col-sm-8 control_padding">
                <SfTextBox @ref="FilterCustomerNameObj" Placeholder="@Localizer["Label_Filter_CustomerName"]" Value="@FilterCustomerNameValue" ValueChange="FilterCustomerName_ValueChange">
                </SfTextBox>
            </div>
        </div>
    </div>

    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3 control_padding">&nbsp;</label>
            <div class="col-sm-4 control_padding">
                <SfCheckBox @bind-Checked="OnlyActiveIsChecked" Label="@Localizer["Label_Filter_Report_OnlyOwn"]" ValueChange="@OnlyActive_OnChange" TChecked="bool"></SfCheckBox>
            </div>
        </div>

        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Category"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="CategoryComboObj" TValue="string" TItem="FiltersModels.CategoryModel" ShowClearButton="false" @bind-Index="@CategoryDefaultIndex" DataSource="@_Category">
                    <ComboBoxEvents TItem="FiltersModels.CategoryModel" TValue="string" ValueChange="onChangeCategory"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="CaseType" Value="CaseTypeID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 control_padding">

        </div>
    </div>

    @if (!ShowDashboardComponent)
    {
        <div class="row row_padding">
            <div class="col-sm-5 form-inline control_padding">

            </div>

            <div class="col-sm-3 form-inline control_padding">
                <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Result"]</label>
                <div class="col-sm-8 control_padding">
                    <SfComboBox @ref="ResultComboObj" TValue="string" TItem="FiltersModels.CaseResultModel" ShowClearButton="false" @bind-Index="@ResultDefaultIndex" DataSource="@_Results">
                        <ComboBoxEvents TItem="FiltersModels.CaseResultModel" TValue="string" ValueChange="onChangeResult"></ComboBoxEvents>
                        <ComboBoxFieldSettings Text="CaseResult" Value="CaseResultID"></ComboBoxFieldSettings>
                    </SfComboBox>
                </div>
            </div>
            <div class="col-sm-4 control_padding">

            </div>
        </div>

        <div class="row row_padding">
            <div class="col-sm-5 form-inline control_padding">

            </div>

            <div class="col-sm-3 form-inline control_padding">
                <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Status"]</label>
                <div class="col-sm-8 control_padding">
                    <SfComboBox @ref="StatusComboObj" TValue="string" TItem="FiltersModels.CaseStatusModel" ShowClearButton="false" @bind-Index="@StatusDefaultIndex" DataSource="@_Statuses">
                        <ComboBoxEvents TItem="FiltersModels.CaseStatusModel" TValue="string" ValueChange="onChangeStatus"></ComboBoxEvents>
                        <ComboBoxFieldSettings Text="CaseStatus" Value="CaseStatusID"></ComboBoxFieldSettings>
                    </SfComboBox>
                </div>
            </div>
            <div class="col-sm-4 control_padding">

            </div>
        </div>
    }

    <div class="row">
        <hr style="background-color: #ABC3D7;height:1px;width:100%" />
    </div>

    <div class="row">
        <div class="col-sm">
            <RadzenButton ButtonStyle="ButtonStyle.Info" Text="@Localizer["Button_Filter"]" Click="onGo_Click" Size="ButtonSize.Small" />
            <RadzenButton ButtonStyle="ButtonStyle.Info" Text="@Localizer["Button_Filter_Reset"]" Click="ClearFilter" Size="ButtonSize.Small" />
        </div>
    </div>

    <div class="row">
        <hr style="background-color: #ABC3D7;height:1px;width:100%" />
    </div>


</div>

@if (ShowDashboardComponent)
{
    <Dashboard ParentReports="@this" OnChangeStatusClick=@OnChangeStatusEvent OnChangeResultClick=@OnChangeResultEvent OnChangeCaseCountClick=@OnChangeCaseCountEvent />
}

@if (!ShowDashboardComponent)
{
    <SfGrid @ref="CasesObj" DataSource="@_Cases" AllowPaging="false" AllowResizing="false" AllowTextWrap="true">
        <GridPageSettings PageSize="25"></GridPageSettings>
        <GridEvents CommandClicked="OnCommandClicked" TValue="Case"></GridEvents>
        <GridColumns>
            <GridColumn Field=@nameof(Case.CaseID) HeaderText="@Localizer["Cases_List_CaseID"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="80"></GridColumn>
            <GridColumn Field=@nameof(Case.ProfileName) HeaderText="@Localizer["Label_Filter_ProfileID"]" Width="80"></GridColumn>
            <GridColumn Field=@nameof(Case.Subject) HeaderText="@Localizer["Cases_List_Subject"]"></GridColumn>
            <GridColumn Field=@nameof(Case.CaseType) HeaderText="@Localizer["Cases_List_Category"]" Width="100"></GridColumn>
            <GridColumn Field=@nameof(Case.CaseStatus) HeaderText="@Localizer["Cases_List_Status"]" Width="100"></GridColumn>
            <GridColumn Field=@nameof(Case.CaseResult) HeaderText="@Localizer["Cases_List_Ergebnis"]" Width="80"></GridColumn>
            <GridColumn Field=@nameof(Case.CreateDate) HeaderText="@Localizer["Cases_List_CreateOn"]" Width="80"></GridColumn>
            <GridColumn Field=@nameof(Case.SapUser)></GridColumn>
            <GridColumn Field=@nameof(Case.LastActivity) HeaderText="@Localizer["Cases_List_LastModify"]" Width="80"></GridColumn>
            <GridColumn HeaderText="" Width="80">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat"})"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}





@code {
    [Parameter]
    public Action<bool> FilterChanged { get; set; }

    bool ShowDashboardComponent { get; set; } = true;

    private int? GateDefaultIndex { get; set; } = 0;
    private int? CategoryDefaultIndex { get; set; } = 0;
    private int? ProfileDefaultIndex { get; set; } = 0;
    private int? ResultDefaultIndex { get; set; } = 0;
    private int? StatusDefaultIndex { get; set; } = 0;
    public int AppID { get; set; }
    public int? CaseTypeID { get; set; }
    public int? ProfileID { get; set; }
    public int? StatusID { get; set; }
    public int? ResultID { get; set; }
    public int? WithAliasID { get; set; }

    SfGrid<Case> CasesObj;
    SfComboBox<string, FiltersModels.GateModel> GateComboObj;
    SfComboBox<string, FiltersModels.CategoryModel> CategoryComboObj;
    SfComboBox<string, FiltersModels.ProfileModel> ProfileComboObj;
    SfComboBox<string, FiltersModels.CaseResultModel> ResultComboObj;
    SfComboBox<string, FiltersModels.CaseStatusModel> StatusComboObj;
    SfDatePicker<DateTime?> CreateFromDateObj;
    SfDatePicker<DateTime?> CreateToDateObj;
    SfDatePicker<DateTime?> ModifyFromDateObj;
    SfDatePicker<DateTime?> ModifyToDateObj;

    public DateTime? CreateFromDateValue { get; set; } // = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime? CreateToDateValue { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    //public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 05);
    //public DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 27);
    public DateTime? ModifyFromDateValue { get; set; } // = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime? ModifyToDateValue { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

    SfTextBox FilterCaseIDObj;
    public string FilterCaseIDValue { get; set; } // = "Hello, World!";
    SfTextBox FilterCustomerNameObj;
    public string FilterCustomerNameValue { get; set; } // = "Hello, World!";

    private bool OnlyActiveIsChecked = true;

    private List<FiltersModels.GateModel> _Gates;
    private List<FiltersModels.CategoryModel> _Category;
    private List<FiltersModels.ProfileModel> _Profile;
    private List<FiltersModels.CaseStatusModel> _Statuses;
    private List<FiltersModels.CaseResultModel> _Results;

    private List<Case> _Cases;

    protected override async Task OnInitializedAsync()
    {
        AppID = 1;
        _Gates = _filtersData.GetGates();
        if (_Gates != null && _Gates.Count > 0)
        {
            AppID = (Convert.ToInt32(_Gates[0].appID));
            BindFilterListBox();
        }
    }

    private void BindFilterListBox()
    {

        _Category = _filtersData.GetCategories(AppID);
        _Profile = _filtersData.GetProfiles(AppID);
        _Statuses = _filtersData.GetStatuses();
        _Results = _filtersData.GetResults(AppID);

        FiltersModels.CategoryModel _FilterCategoryModel = new FiltersModels.CategoryModel();
        _FilterCategoryModel.CaseType = Localizer["Value_All_Text"];
        _FilterCategoryModel.CaseTypeID = -1;
        _Category.Insert(0, _FilterCategoryModel);

        FiltersModels.ProfileModel _FilterProfileModel = new FiltersModels.ProfileModel();
        _FilterProfileModel.ProfileName = Localizer["Value_All_Text"];
        _FilterProfileModel.ProfileID = -1;
        _Profile.Insert(0, _FilterProfileModel);

        FiltersModels.CaseResultModel _FilterCaseResultModel = new FiltersModels.CaseResultModel();
        _FilterCaseResultModel.CaseResult = Localizer["Value_All_Text"];
        _FilterCaseResultModel.CaseResultID = -1;
        _Results.Insert(0, _FilterCaseResultModel);

        FiltersModels.CaseStatusModel _FilterCaseStatusModel = new FiltersModels.CaseStatusModel();
        _FilterCaseStatusModel.CaseStatus = Localizer["Value_All_Text"];
        _FilterCaseStatusModel.CaseStatusID = -1;
        _Statuses.Insert(0, _FilterCaseStatusModel);

        CaseTypeID = _Category[0].CaseTypeID == -1 ? null : _Category[0].CaseTypeID;
        ProfileID = _Profile[0].ProfileID == -1 ? null : _Profile[0].ProfileID;
        StatusID = _Statuses[0].CaseStatusID == -1 ? null : _Statuses[0].CaseStatusID;
        ResultID = _Results[0].CaseResultID == -1 ? null : _Results[0].CaseResultID;

        StateHasChanged();
    }

    async Task onGo_Click()
    {
        if (ShowDashboardComponent)
        {
            FilterChanged?.Invoke(true);
            return;
        }

        int? _caseid = null;
        try
        {
            if (!string.IsNullOrEmpty(FilterCaseIDValue))
                _caseid = Convert.ToInt32(FilterCaseIDValue);
        }
        catch { };



        int? _resultid = null;
        try
        {
            if (ResultComboObj != null && !string.IsNullOrEmpty(ResultComboObj.Value))
                _resultid = Convert.ToInt32(ResultComboObj.Value);
        }
        catch { };



        int contactID = await _localUserData.GetContactID();

        //ShowDashboardComponent = false;

        if (WithAliasID != null)
        {
            _Cases = await _ICMSAPI.GetCaseList(_caseid, AppID, CaseTypeID, StatusID, contactID,
                CreateFromDateValue, CreateToDateValue, ModifyFromDateValue, ModifyToDateValue, ProfileID, FilterCustomerNameValue);
        }
        else
        {
            _Cases = await _ICMSAPI.GetCaseList(_caseid, AppID, CaseTypeID, StatusID, contactID,
                CreateFromDateValue, CreateToDateValue, ModifyFromDateValue, ModifyToDateValue, ProfileID, FilterCustomerNameValue);
        }



    }
    async Task ClearFilter()
    {
        await this.GateComboObj.Clear();
        await this.CategoryComboObj.Clear();
        await this.ProfileComboObj.Clear();
        CreateFromDateValue = null;
        CreateToDateValue = null;
        ModifyFromDateValue = null;
        ModifyToDateValue = null;
        FilterCaseIDValue = null;
        FilterCustomerNameValue = null;
        OnlyActiveIsChecked = true;
    }

    public async void OnCommandClicked(CommandClickEventArgs<Case> args)
    {
        if (args.CommandColumn.Type == CommandButtonType.Edit)
        {
            await storageService.SetItemAsync("CaseViewID", args.RowData.CaseID);

            NavigationManager.NavigateTo("/case/details", forceLoad: true);
        }
    }

    private void onChangePlatform(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FiltersModels.GateModel> args)
    {
        int _AppID = -1;
        if (Int32.TryParse(args.ItemData.appID, out _AppID))
        {
            // AppID = (Convert.ToInt32(args.ItemData.appID));
            AppID = _AppID;

            this.CategoryComboObj.Clear();
            this.ProfileComboObj.Clear();

            BindFilterListBox();
            FilterChanged?.Invoke(true);
            StateHasChanged();
        }

    }
    private void onChangeProfile(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FiltersModels.ProfileModel> args)
    {
        ProfileID = (Convert.ToInt32(args.ItemData.ProfileID));
        if (ProfileID == -1)
            ProfileID = null;

        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void onChangeCategory(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FiltersModels.CategoryModel> args)
    {
        CaseTypeID = (Convert.ToInt32(args.ItemData.CaseTypeID));
        if (CaseTypeID == -1)
            CaseTypeID = null;

        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void onChangeResult(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FiltersModels.CaseResultModel> args)
    {
        ResultID = (Convert.ToInt32(args.ItemData.CaseResultID));
        if (ResultID == -1)
            ResultID = null;

        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void onChangeStatus(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FiltersModels.CaseStatusModel> args)
    {
        StatusID = (Convert.ToInt32(args.ItemData.CaseStatusID));
        if (StatusID == -1)
            StatusID = null;

        FilterChanged?.Invoke(true);
        StateHasChanged();
    }

    private void CreateFromDate_OnChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        CreateFromDateValue = args.Value;
        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void CreateToDate_OnChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        CreateToDateValue = args.Value;
        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void ModifyFromDate_OnChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        ModifyFromDateValue = args.Value;
        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void ModifyToDate_OnChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        ModifyToDateValue = args.Value;
        FilterChanged?.Invoke(true);
        StateHasChanged();
    }

    private void FilterCaseID_ValueChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        FilterCaseIDValue = args.Value;
        StateHasChanged();
    }
    private void FilterCustomerName_ValueChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        FilterCustomerNameValue = args.Value;
        StateHasChanged();
    }
    private void OnlyActive_OnChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        OnlyActiveIsChecked = args.Checked;
        StateHasChanged();
    }

    private async Task OnChangeStatusEvent(int value)
    {
        StatusID = value;
        ResultID = null;
        WithAliasID = null;
        ShowDashboardComponent = false;
        await onGo_Click();
        StateHasChanged();
    }
    private async Task OnChangeResultEvent(int value)
    {
        StatusID = null;
        ResultID = value;
        WithAliasID = null;
        ShowDashboardComponent = false;
        await onGo_Click();
        StateHasChanged();
    }
    private async Task OnChangeCaseCountEvent(int value)
    {
        StatusID = null;
        ResultID = null;
        WithAliasID = value;
        ShowDashboardComponent = false;
        await onGo_Click();
        StateHasChanged();
    }

}
