@page "/reports/reports"

@using HCMApi;
@using HCM.Data;
@using HCMDataAccess;
@using HCMDataAccess.Models;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns

@inject ICMSAPI _ICMSAPI;
@inject IStringLocalizer<App> Localizer
@inject IFiltersData _filtersData;
@inject ILocalUserData _localUserData;


@attribute [Authorize]

<h3>@Localizer["Reports_Title"]</h3>

<h4 class="tLabel bottom_blue_bg">@Localizer["Label_Filter"]</h4>

<div class="container">
    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3 control_padding">@Localizer["Label_Filter_Case_Created"]</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker @ref="CreateFromDateObj" TValue="DateTime?" Value='@CreateFromDateValue' StrictMode=true ShowTodayButton="false">
                    <DatePickerEvents TValue="DateTime?" ValueChange="@CreateFromDate_OnChange"></DatePickerEvents>
                </SfDatePicker>
            </div>

            <label class="col-sm-1 control_padding">-</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker @ref="CreateToDateObj" TValue="DateTime?" Value='@CreateToDateValue' StrictMode=true ShowTodayButton="false">
                    <DatePickerEvents TValue="DateTime?" ValueChange="@CreateToDate_OnChange"></DatePickerEvents>
                </SfDatePicker>
            </div>
        </div>
        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Platform"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="GateComboObj" TValue="string" TItem="FiltersModels.FilterGateModel" ShowClearButton="false" @bind-Index="@GateDefaultIndex" DataSource="@_Gates">
                    @*<SfDataManager Url="api/FiltersData/GetGates" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>*@
                    <ComboBoxEvents TItem="FiltersModels.FilterGateModel" TValue="string" ValueChange="onChangePlatform"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="appName" Value="appID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_CaseID"]</label>
            <div class="col-sm-8 control_padding">
                <SfTextBox @ref="FilterCaseIDObj" Placeholder="@Localizer["Label_Filter_Case_CaseID"]" Value="@FilterCaseIDValue" ValueChange="FilterCaseID_ValueChange">
                </SfTextBox>
            </div>
        </div>
    </div>

    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3 control_padding">@Localizer["Label_Filter_Case_Modify"]</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker @ref="ModifyFromDateObj" TValue="DateTime?" Value='@ModifyFromDateValue' StrictMode=true ShowTodayButton="false">
                    <DatePickerEvents TValue="DateTime?" ValueChange="@ModifyFromDate_OnChange"></DatePickerEvents>
                </SfDatePicker>
            </div>

            <label class="col-sm-1 control_padding">-</label>
            <div class="col-sm-4 control_padding">
                <SfDatePicker @ref="ModifyToDateObj" TValue="DateTime?" Value='@ModifyToDateValue' StrictMode=true ShowTodayButton="false">
                    <DatePickerEvents TValue="DateTime?" ValueChange="@ModifyToDate_OnChange"></DatePickerEvents>
                </SfDatePicker>
            </div>
        </div>
        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_ProfileID"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="ProfileComboObj" TValue="string" TItem="FiltersModels.FilterProfileModel" ShowClearButton="false" @bind-Index="@ProfileDefaultIndex" DataSource="@_Profile">
                    <ComboBoxEvents TItem="FiltersModels.FilterProfileModel" TValue="string" ValueChange="onChangeProfile"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="ProfileName" Value="ProfileID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_CustomerName"]</label>
            <div class="col-sm-8 control_padding">
                <SfTextBox @ref="FilterCustomerNameObj" Placeholder="@Localizer["Label_Filter_CustomerName"]" Value="@FilterCustomerNameValue" ValueChange="FilterCustomerName_ValueChange">
                </SfTextBox>
            </div>
        </div>
    </div>

    <div class="row row_padding">
        <div class="col-sm-5 form-inline control_padding">
            <label class="col-sm-3 control_padding">&nbsp;</label>
            <div class="col-sm-4 control_padding">
                <SfCheckBox @bind-Checked="OnlyActiveIsChecked" Label="@Localizer["Label_Filter_Report_OnlyOwn"]" ValueChange="@OnlyActive_OnChange" TChecked="bool"></SfCheckBox>
            </div>
        </div>

        <div class="col-sm-3 form-inline control_padding">
            <label class="col-sm-4 control_padding">@Localizer["Label_Filter_Case_Category"]</label>
            <div class="col-sm-8 control_padding">
                <SfComboBox @ref="CategoryComboObj" TValue="string" TItem="FiltersModels.FilterCategoryModel" ShowClearButton="false" @bind-Index="@CategoryDefaultIndex" DataSource="@_Category">
                    <ComboBoxEvents TItem="FiltersModels.FilterCategoryModel" TValue="string" ValueChange="onChangeCategory"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="CaseType" Value="CaseTypeID"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="col-sm-4 control_padding">

        </div>
    </div>



    <div class="row">
        <hr style="background-color: #ABC3D7;height:1px;width:100%" />
    </div>

    <div class="row">
        <div class="col-sm">
            <RadzenButton ButtonStyle="ButtonStyle.Info" Text="@Localizer["Button_Filter"]" Click="onGo_Click" Size="ButtonSize.Small" />
            <RadzenButton ButtonStyle="ButtonStyle.Info" Text="@Localizer["Button_Filter_Reset"]" Click="ClearFilter" Size="ButtonSize.Small" />
        </div>
    </div>



</div>

@if (ShowDashboardComponent)
{
<Dashboard ParentReports="@this" />
}





@code {
    [Parameter]
    public Action<bool> FilterChanged { get; set; }

    bool ShowDashboardComponent { get; set; } = true;
    bool ShowGridReportComponent { get; set; } = false;

    private int? GateDefaultIndex { get; set; } = 0;
    private int? CategoryDefaultIndex { get; set; } = 0;
    private int? ProfileDefaultIndex { get; set; } = 0;
    public int AppID { get; set; }
    public int? CaseTypeID { get; set; }
    public int? ProfileID { get; set; }

    SfComboBox<string, FiltersModels.FilterGateModel> GateComboObj;
    SfComboBox<string, FiltersModels.FilterCategoryModel> CategoryComboObj;
    SfComboBox<string, FiltersModels.FilterProfileModel> ProfileComboObj;
    SfDatePicker<DateTime?> CreateFromDateObj;
    SfDatePicker<DateTime?> CreateToDateObj;
    SfDatePicker<DateTime?> ModifyFromDateObj;
    SfDatePicker<DateTime?> ModifyToDateObj;

    public DateTime? CreateFromDateValue { get; set; } // = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime? CreateToDateValue { get; set; }  = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    //public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 05);
    //public DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 27);
    public DateTime? ModifyFromDateValue { get; set; } // = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime? ModifyToDateValue { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

    SfTextBox FilterCaseIDObj;
    public string FilterCaseIDValue { get; set; } // = "Hello, World!";
    SfTextBox FilterCustomerNameObj;
    public string FilterCustomerNameValue { get; set; } // = "Hello, World!";

    private bool OnlyActiveIsChecked = true;

    private List<FiltersModels.FilterGateModel> _Gates;
    private List<FiltersModels.FilterCategoryModel> _Category;
    private List<FiltersModels.FilterProfileModel> _Profile;

    protected override async Task OnInitializedAsync()
    {
        AppID = 1;
        _Gates = _filtersData.GetGates();
        if (_Gates!= null && _Gates.Count>0)
        {
            AppID = (Convert.ToInt32(_Gates[0].appID));
            BindFilterListBox();
        }
    }
    private void BindFilterListBox()
    {

        _Category = _filtersData.GetCategories(AppID);
        _Profile = _filtersData.GetProfiles(AppID);

        FiltersModels.FilterCategoryModel _FilterCategoryModel = new FiltersModels.FilterCategoryModel();
        _FilterCategoryModel.CaseType = Localizer["Value_All_Text"];
        _FilterCategoryModel.CaseTypeID = -1;
        _Category.Insert(0, _FilterCategoryModel);

        FiltersModels.FilterProfileModel _FilterProfileModel = new FiltersModels.FilterProfileModel();
        _FilterProfileModel.ProfileName = Localizer["Value_All_Text"];
        _FilterProfileModel.ProfileID = -1;
        _Profile.Insert(0, _FilterProfileModel);

        CaseTypeID = _Category[0].CaseTypeID == -1 ? null : _Category[0].CaseTypeID;
        ProfileID = _Profile[0].ProfileID == -1 ? null : _Profile[0].ProfileID;

        StateHasChanged();
    }

    async Task onGo_Click()
    {


        int? _caseid = null;
        try
        {
            if (!string.IsNullOrEmpty(FilterCaseIDValue))
                _caseid = Convert.ToInt32(FilterCaseIDValue);
        }
        catch { };


        int? _casetypeid = null;
        try
        {
            if (!string.IsNullOrEmpty(CategoryComboObj.Value))
                _casetypeid = Convert.ToInt32(CategoryComboObj.Value);
        }
        catch { };

        int? ProfileID = null;
        try
        {
            if (!string.IsNullOrEmpty(ProfileComboObj.Value))
                ProfileID = Convert.ToInt32(ProfileComboObj.Value);
        }
        catch { };

        int contactID = await _localUserData.GetContactID();

        ShowDashboardComponent = false;

        //        Cases = await _ICMSAPI.GetCaseList(_caseid, _appid, _casetypeid, _casestatusid, contactID,
        //CreateFromDateValue, CreateToDateValue, ModifyFromDateValue, ModifyToDateValue, ProfileID, FilterCustomerNameValue);

    }
    async Task ClearFilter()
    {
        await this.GateComboObj.Clear();
        await this.CategoryComboObj.Clear();
        await this.ProfileComboObj.Clear();
        CreateFromDateValue = null;
        CreateToDateValue = null;
        ModifyFromDateValue = null;
        ModifyToDateValue = null;
        FilterCaseIDValue = null;
        FilterCustomerNameValue = null;
        OnlyActiveIsChecked = true;
    }


    private void onChangePlatform(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FiltersModels.FilterGateModel> args)
    {
        AppID = (Convert.ToInt32(args.ItemData.appID));

        this.CategoryComboObj.Clear();
        this.ProfileComboObj.Clear();

        BindFilterListBox();
        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void onChangeProfile(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FiltersModels.FilterProfileModel> args)
    {
        ProfileID = (Convert.ToInt32(args.ItemData.ProfileID));
        if (ProfileID == -1)
            ProfileID = null;

        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void onChangeCategory(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FiltersModels.FilterCategoryModel> args)
    {
        CaseTypeID = (Convert.ToInt32(args.ItemData.CaseTypeID));
        if (CaseTypeID == -1)
            CaseTypeID = null;

        FilterChanged?.Invoke(true);
        StateHasChanged();
    }

    private void CreateFromDate_OnChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        CreateFromDateValue = args.Value;
        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void CreateToDate_OnChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        CreateToDateValue = args.Value;
        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void ModifyFromDate_OnChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        ModifyFromDateValue = args.Value;
        FilterChanged?.Invoke(true);
        StateHasChanged();
    }
    private void ModifyToDate_OnChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        ModifyToDateValue = args.Value;
        FilterChanged?.Invoke(true);
        StateHasChanged();
    }

    private void FilterCaseID_ValueChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        FilterCaseIDValue = args.Value;
        StateHasChanged();
    }
    private void FilterCustomerName_ValueChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        FilterCustomerNameValue = args.Value;
        StateHasChanged();
    }
    private void OnlyActive_OnChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        OnlyActiveIsChecked = args.Checked;
        StateHasChanged();
    }

}
