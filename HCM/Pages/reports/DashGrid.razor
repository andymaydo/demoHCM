@using HCMApi;

@using HCMDataAccess;
@using Syncfusion.Blazor.DropDowns
@using HCMModels;

@code {

    [Inject] private ILogger<DashGrid> _logger { get; set; }
    [Inject] private IStringLocalizer<App> Localizer { get; set; }
    
    [Parameter] public CaseFilterModel InputFilter { get; set; }
    [Parameter] public int ContactId { get; set; }
      
    [Parameter] public EventCallback<int> OnStatusClicked { get; set; }
    [Parameter] public EventCallback<int> OnResultClicked { get; set; }
    [Parameter] public EventCallback<int> OnAliasClicked { get; set; }

    protected UiMessages Messages { get; set; }
    protected List<CaseModel> CaseByStatusList { get; set; }
    protected List<CaseModel> CaseByResultList { get; set; }
    protected List<CaseModel> CaseByAliasList { get; set; }


    private CaseFilterModel _inputFilter;

    protected override void OnInitialized()
    {
        base.OnInitialized();       
        Messages = new UiMessages();
        _inputFilter = ObjHelper.Clone(InputFilter);
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        try
        {

            Messages.List.Clear();
            if (!ObjHelper.JsonCompare(_inputFilter, InputFilter))
            {
                _inputFilter = ObjHelper.Clone(InputFilter);
                await LoadCaseList();
            }

        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer["MsgPanel_Error_Title"],ex.Message, showDetail: true);
        }
    }

    //public async Task RecordDoubleClickHandler(RecordDoubleClickEventArgs<CaseModel> args)
    //{     
    //    await OnCaseDetailsClicked.InvokeAsync(args.RowData.CaseID);
    //}

    private async Task LoadCaseList()
    {

            //int tempVal;
            //int _appid = int.TryParse(InputFilter.GateId, out tempVal) ? tempVal : 1; // default and only (for now) DPFGate

            //int? _casetypeid = int.TryParse(InputFilter.CategoryId, out tempVal) ? tempVal : (int?)null;
            //int? _casesresultid = int.TryParse(InputFilter.ResultId, out tempVal) ? tempVal : (int?)null;
            //int? _casestatusid = int.TryParse(InputFilter.StatusId, out tempVal) ? tempVal : (int?)null;
            ////int? _profileID = int.TryParse(InputFilter.ProfilId, out tempVal) ? tempVal : (int?)null;
                       
            int? _contactID = InputFilter.ShowOnlyOwnCases ? ContactId : null;

            //CaseList = await ReportService.CaseDetail(_appid, _casetypeid, _contactID, _casestatusid, _casesresultid,
            //    InputFilter.CreateFromDate, InputFilter.CreateToDate, InputFilter.ModifyFromDate, InputFilter.ModifyToDate, 
            //    InputFilter.CaseId, _profileID, InputFilter.SearchedName);

            //_ReportCaseByStatusList = await _reportsCaseData.CaseByStatus(_appid, ParentReports.CaseTypeID, _contactID,
            //    ParentReports.CreateFromDateValue, ParentReports.CreateToDateValue, ParentReports.ModifyFromDateValue, ParentReports.ModifyToDateValue,
            //    _caseid, ParentReports.ProfileID, _customerName);

            //_ReportCaseByResultList = await _reportsCaseData.CaseByResult(ParentReports.AppID, ParentReports.CaseTypeID, _contactID,
            //    ParentReports.CreateFromDateValue, ParentReports.CreateToDateValue, ParentReports.ModifyFromDateValue, ParentReports.ModifyToDateValue,
            //    _caseid, ParentReports.ProfileID, _customerName);

            //_ReportAliasCountList = await _reportsCaseData.AliasCount(ParentReports.AppID, ParentReports.CaseTypeID, _contactID,
            //    ParentReports.CreateFromDateValue, ParentReports.CreateToDateValue, ParentReports.ModifyFromDateValue, ParentReports.ModifyToDateValue,
            //    _caseid, ParentReports.ProfileID, _customerName);

    }
}
