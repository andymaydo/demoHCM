@using HCMApi;

@using HCMDataAccess;
@using Syncfusion.Blazor.DropDowns
@using HCMModels;

<div class="blue_bg"></div>
<h5>@Localizer.Str["Label_Report_Result_Title"]</h5>

@if(@_loadingStatus == 1)
{
    <div class="container-fluid">
        <div class="row row_padding">
            <div class="col-md-6 control_padding">
                <div class="col-md-12 control_padding">
                    <label class="col-md-12 text-left ReportHeader">@Localizer.Str["Label_Report_Status_Group_Title"]</label>
                </div>
                @foreach (CaseModel r in CaseByStatusList)
                {
                    <div class="col-md-12 control_padding form-inline">
                        <div class="col-md-6 control_padding">
                            <span class="col-md-12 text-left ReportItem">@Localizer.Str["Case_Status_" + r.CaseStatusID]</span>
                        </div>
                        <div class="col-md-6 control_padding text-right">
                            <span class="col-md-12 ReportItemNormal"><a href="" class="ReportItemNormal" @onclick="@(() => OnStatusClicked.InvokeAsync(r.CaseStatusID))" @onclick:preventDefault>@r.CaseCount</a></span>
                        </div>
                    </div>
                }
            </div>

            <div class="col-md-6 control_padding">
                <div class="col-md-12 control_padding">
                    <label class="col-md-12 text-left ReportHeader">@Localizer.Str["Label_Report_Result_Group_Title"]</label>
                </div>
                @foreach (CaseModel r in CaseByResultList)
                {
                    <div class="col-md-12 control_padding form-inline">
                        <div class="col-md-6 control_padding">
                            <span class="col-md-12 text-left ReportItem">@Localizer.Str["Case_Result_" + r.CaseResultID]</span>
                        </div>
                        <div class="col-md-6 control_padding text-right">
                            <span class="col-md-12 ReportItemNormal"><a href="" class="ReportItemNormal" @onclick="@(() => OnResultClicked.InvokeAsync(r.CaseResultID))" @onclick:preventDefault>@r.CaseCount</a></span>
                        </div>
                    </div>
                }
            </div>

        </div>

        <div class="row row_padding">
            <div class="col-md-6 control_padding">
                <div class="col-md-12 control_padding">
                    <label class="col-md-12 text-left ReportHeader">@Localizer.Str["Label_Report_Alias_Group_Title"]</label>
                </div>
                @foreach (CaseModel r in CaseByAliasList)
                {
                    <div class="col-md-12 control_padding form-inline">
                        <div class="col-md-6 control_padding">
                            <span class="col-md-12 text-left ReportItem">@Localizer.Str["Label_Report_Alias_Group_Count"]</span>
                        </div>
                        <div class="col-md-6 control_padding text-right">
                            <span class="col-md-12 ReportItemNormal"><a href="" class="ReportItemNormal" @onclick="@(() => OnAliasClicked.InvokeAsync())" @onclick:preventDefault>@r.CaseCount</a></span>
                        </div>
                    </div>
                }
            </div>

            <div class="col-md-6 control_padding">
                &nbsp;
            </div>
        </div>

    </div>
}


<div class="pt-3">
    <UiMessageBox Data="Messages.List" />
</div>

@code {

    [Inject] private ILogger<DashGrid> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private IReportsCaseData ReportService { get; set; }


    [Parameter] public CaseFilterModel InputFilter { get; set; }
    [Parameter] public int ContactId { get; set; }

    [Parameter] public EventCallback<int> OnStatusClicked { get; set; }
    [Parameter] public EventCallback<int> OnResultClicked { get; set; }
    [Parameter] public EventCallback OnAliasClicked { get; set; }

    protected UiMessages Messages { get; set; }
    protected List<CaseModel> CaseByStatusList { get; set; }
    protected List<CaseModel> CaseByResultList { get; set; }
    protected List<CaseModel> CaseByAliasList { get; set; }


    private CaseFilterModel _inputFilter;
    private int _loadingStatus;

    protected override async Task OnInitializedAsync()
    {
            await base.OnInitializedAsync();
            Messages = new UiMessages(); 
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        try
        {
            _loadingStatus = 0;

            Messages.List.Clear();
            if (!ObjHelper.JsonCompare(_inputFilter, InputFilter))
            {
                _inputFilter = ObjHelper.Clone(InputFilter);
                await LoadCaseList();
            }

            _loadingStatus = 1;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);

            _loadingStatus = 2;
        }
    }

 
    private async Task LoadCaseList()
    {                                   
            int? _contactID = InputFilter.ShowOnlyOwnCases ? ContactId : null;

            CaseByStatusList = await ReportService.CaseByStatus(InputFilter.GateId, InputFilter.CategoryId, _contactID,
                InputFilter.CreateFromDate, InputFilter.CreateToDate, InputFilter.ModifyFromDate, InputFilter.ModifyToDate, 
                InputFilter.CaseId, InputFilter.ProfilId, InputFilter.SearchedName);

            CaseByResultList = await ReportService.CaseByResult(InputFilter.GateId, InputFilter.CategoryId, _contactID,
                InputFilter.CreateFromDate, InputFilter.CreateToDate, InputFilter.ModifyFromDate, InputFilter.ModifyToDate, 
                InputFilter.CaseId, InputFilter.ProfilId, InputFilter.SearchedName);

            CaseByAliasList = await ReportService.AliasCount(InputFilter.GateId, InputFilter.CategoryId, _contactID,
                InputFilter.CreateFromDate, InputFilter.CreateToDate, InputFilter.ModifyFromDate, InputFilter.ModifyToDate, 
                InputFilter.CaseId, InputFilter.ProfilId, InputFilter.SearchedName);

    }
}
