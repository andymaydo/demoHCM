@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using System.ComponentModel.DataAnnotations



@if (ShowForm)
{
    <EditForm Model="this" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="mt-3">
            <label class="font-weight-bold">@AmLocalizer.GetText("AliasDetail_ActionReason")</label>
            <SfTextBox Multiline=true @bind-Value="@ActionsReason"></SfTextBox>
            <ValidationMessage For="@(() => this.ActionsReason)" />
        </div>

        <div class="mt-2">

            <SfButton Type="submit" CssClass="e-outline mr-3">@AmLocalizer.GetText("Form_Button_OK")</SfButton>
            <SfButton Type="button" CssClass="e-outline" OnClick="OnActionCancel">@AmLocalizer.GetText("Form_Button_Cancel")</SfButton>

        </div>
    </EditForm>
    
}


@code {

    [Inject] private IAliasManager AliasService { get; set; }
    [Inject] private IAliasManagerLocalizer AmLocalizer { get; set; }
    [Inject] private ILogger<AliasDetailsActionsConfirm> _logger { get; set; }

    [CascadingParameter(Name = "CurrentUserLogin")] public string CurrentUserLogin { get; set; }
    [CascadingParameter] public AmAlias Aliastem { get; set; }

    [Parameter] public string ActionType { get; set; }
    [Parameter] public int ProtocolId { get; set; }
    [Parameter] public bool ShowForm { get; set; }
    [Parameter] public EventCallback<bool> ShowFormChanged { get; set; }
    [Parameter] public EventCallback OnAliasStatusChange { get; set; }


    [Display(Name = "AliasDetail_ActionReason", ResourceType = typeof(AmResource))]
    [Required(ErrorMessageResourceName = "Form_Field_Required", ErrorMessageResourceType = typeof(AmResource))]
    public string ActionsReason { get; set; } = string.Empty;


    public async Task Close()
    {
        ShowForm = false;
        await ShowFormChanged.InvokeAsync(ShowForm);
    }

    protected async Task HandleValidSubmit()
    {       

        try
        {            
            switch (ActionType)
            {
                case "Reactivate":

                    await AliasService.ReActivateAsync(Aliastem.aliasID, ActionsReason, CurrentUserLogin);
                    break;

                case "Deactivate":

                    await AliasService.DeActivateAsync(Aliastem.aliasID, ActionsReason, CurrentUserLogin);
                    break;

                case "Delete":

                    await AliasService.DeleteAsync(Aliastem.aliasID, ActionsReason, CurrentUserLogin);
                    break;

                case "Authorize":

                    await AliasService.AuthorizeAsync(ProtocolId, ActionsReason, CurrentUserLogin);
                    break;

                case "Cancel":

                    await AliasService.DiscardAsync(ProtocolId, ActionsReason, CurrentUserLogin);
                    break;
            }

            await Close();
            await OnAliasStatusChange.InvokeAsync();
            ActionsReason = string.Empty;

        }
        catch (Exception ex)
        {
            _logger.LogDebug(ex, ex.StackTrace);
            _logger.LogError(ex.Message);
        }

    }

    protected async Task OnActionCancel()
    {
        await Close();

    }
}
