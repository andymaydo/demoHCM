@using HCM.Pages.cases.DetailPage.ActionPan;
@using AutoMapper;




<div class="blue_bg"></div>
<h5>@Localizer.Str["Cases_ListCases"]</h5>


    <SfGrid ID="Grid" DataSource="@CaseList" AllowPaging="true" AllowTextWrap="true"  AllowSorting="true" Locale="@Culture" EnablePersistence="false" AllowSelection="false">
    <GridEvents TValue="CaseModel" RowDataBound="RowBound" QueryCellInfo="CustomizeCell"></GridEvents>    
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings> 
    <GridPageSettings PageSizes="@pageSizes" PageSize="20" PageCount="3"></GridPageSettings>
    
    <GridColumns>
        <GridColumn Field=@nameof(CaseModel.CaseID) HeaderText="@Localizer.Str["Cases_List_CaseID"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="80">
            <Template>
                    @{
                        var _Case = (context as CaseModel);
                        <div>                                                         
                             <a class="alink" href="/Cases/CaseDetails/@_Case.CaseID"><span class="oi oi-zoom-in"></span> @_Case.CaseID</a>
                        </div>
                    }
                </Template>
        </GridColumn>
        <GridColumn Field=@nameof(CaseModel.ProfileName) HeaderText="@Localizer.Str["Label_Filter_ProfileID"]" Width="130"></GridColumn>
        <GridColumn Field=@nameof(CaseModel.Subject) HeaderText="@Localizer.Str["Cases_List_Subject"]" Width="200"></GridColumn>        
        <GridColumn Field=@nameof(CaseModel.CaseStatus) HeaderText="@Localizer.Str["Cases_List_Status"]" Width="110">
            <Template>
                @{
                    var _Case = (context as CaseModel);
                    <div class="alink" @onclick="@(() => StatusChangeHandler(_Case))">
                        <span class="oi oi-wrench"></span> @Localizer.Str["Case_Status_" + _Case.CaseStatusID.ToString()]
                    </div>                    
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(CaseModel.CaseResult) HeaderText="@Localizer.Str["Cases_List_Ergebnis"]" Width="100">
            <Template>
                @{
                    var _Case = (context as CaseModel);
                    <div>
                        @Localizer.Str["Case_Result_" + _Case.CaseResultID.ToString()]
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(CaseModel.CustomerName) HeaderText="@Localizer.Str["Cases_List_GeprufterName"]" Width="190" ></GridColumn>
        <GridColumn Field=@nameof(CaseModel.CreateDate) HeaderText="@Localizer.Str["Cases_List_CreateOn"]" Width="150" ></GridColumn>        
        <GridColumn Field=@nameof(CaseModel.LastActivity) HeaderText="@Localizer.Str["Cases_List_LastModify"]" Width="150" HideAtMedia="(min-width: 992px)"></GridColumn>
        <GridColumn Field=@nameof(CaseModel.SapUser) Width="90" HideAtMedia="(min-width: 992px)"></GridColumn>
    </GridColumns>
</SfGrid>
 <UiMessageBox Data="Messages.List" />

@if (showChangeStatusPopUp)
{
    <ChangeStatusPopUp @bind-ShowModal="showChangeStatusPopUp" 
        CaseModel="@CurrentCase" ProfileModel="@ProfileModel" 
        OnFormSaved="@(() => OnReloadNeeded.InvokeAsync())">
    </ChangeStatusPopUp> 
}

<style>
    .status-new {
        font-weight: bold;
    }
    .status-escalated {        
        background-color: #fae6e6;
    }
    .status-ready4decision {        
        background-color: #e6ffe6;
    }
</style>


@code {

    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private ISyncfusionStringLocalizer SfLocalizer { get; set; }  
    [Inject] private ICMSProfile ProileService { get; set; }
    [Inject] private ICMSAPI CmsService { get; set; }
    [Inject] private IMapper _mapper { get; set; }
    [Inject] private ILogger<CaseGrid> _logger { get; set; }

    [Parameter] public List<CaseModel> CaseList { get; set; }
    [Parameter] public string Culture  { get; set; }         
    [Parameter] public EventCallback OnReloadNeeded { get; set; }

    protected SfGrid<CaseModel> CGrid { get; set; }
    protected string GridState;

    protected CMSProfileModel ProfileModel { get; set; }     
    protected Case CurrentCase { get; set; }
    protected bool showChangeStatusPopUp { get; set; }

    private string[] pageSizes { get; set; }
    private int _loadingStatus;
    protected UiMessages Messages { get; set; }
    private CaseFilterModel _inputFilter;



    protected override void OnInitialized()
    {
        base.OnInitialized();       
        Messages = new UiMessages();
        ProfileModel = new CMSProfileModel();

        SetPageSizeDropDown();

    }


    public async Task StatusChangeHandler(CaseModel currentCase)
    {
        try
        {
            Messages.List.Clear();
            CurrentCase = await CmsService.LoadCase(currentCase.CaseID);       
            ProfileModel = ProileService.Load(currentCase.ProfileID);            
            showChangeStatusPopUp = true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);            
        }

    }


    private void SetPageSizeDropDown()
    {
        List<string> pageList = new List<string>();
        pageList.Add(@SfLocalizer.GetText("Pager_All"));
        pageList.Add("10");
        pageList.Add("20");
        pageList.Add("50");
        pageList.Add("100");
        pageSizes = pageList.ToArray();
    }

    public void RowBound(RowDataBoundEventArgs<CaseModel> args)
    {
        if (args.Data.CaseStatusID == 0)
        {
            args.Row.AddClass(new string[] { "status-new" });
        }       
    }

     public void CustomizeCell(QueryCellInfoEventArgs<CaseModel> args)
    {
        if (args.Column.Field == "CaseStatus")
        {
            if (args.Data.CaseStatusID == 6)
            {
                args.Cell.AddClass(new string[] { "status-escalated" });
            } 
            else if (args.Data.CaseStatusID == 5)
            {
                args.Cell.AddClass(new string[] { "status-ready4decision " });
            }  
        }
    }
}
