@using HCMApi;
@using HCMApi.Models
@using HCMDataAccess;
@using HCMModels;
@using HCM.Pages.cases.DetailPage.ActionPan;
@using AutoMapper;




<div class="blue_bg"></div>
<h5>@Localizer.Str["Cases_ListCases"]</h5>

@if (_loadingStatus == 0)
{
    <p><em>Loading...</em></p>
}

@if (_loadingStatus == 1)
{
    <SfGrid ID="Grid" DataSource="@CaseList" AllowPaging="true" AllowTextWrap="true"  AllowSorting="true" Locale="@Culture" EnablePersistence="false">
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings> 
    <GridPageSettings PageSizes="@pageSizes" PageSize="20" PageCount="3"></GridPageSettings>
    @*<GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="CaseModel"></GridEvents>*@
    <GridColumns>
        <GridColumn Field=@nameof(CaseModel.CaseID) HeaderText="@Localizer.Str["Cases_List_CaseID"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="80">
            <Template>
                    @{
                        var _Case = (context as CaseModel);
                        <div>                            
                             <div class="alink" @onclick="@(() => RecordDoubleClickHandler(_Case.CaseID))"><span class="oi oi-zoom-in"></span> @_Case.CaseID</div>
                        </div>
                    }
                </Template>
        </GridColumn>
        <GridColumn Field=@nameof(CaseModel.ProfileName) HeaderText="@Localizer.Str["Label_Filter_ProfileID"]" Width="130"></GridColumn>
        <GridColumn Field=@nameof(CaseModel.Subject) HeaderText="@Localizer.Str["Cases_List_Subject"]" Width="200"></GridColumn>
        @*<GridColumn Field=@nameof(CaseModel.CaseType) HeaderText="@Localizer.Str["Cases_List_Category"]" ></GridColumn>*@
        <GridColumn Field=@nameof(CaseModel.CaseStatus) HeaderText="@Localizer.Str["Cases_List_Status"]" Width="110">
            <Template>
                @{
                    var _Case = (context as CaseModel);
                    //<div class="alink" @onclick="@(() => StatusChangeHandler(_Case))">
                    //    <span class="oi oi-wrench"></span> @Localizer.Str["Case_Status_" + _Case.CaseStatusID.ToString()]
                    //</div>

                    <div>
                        @Localizer.Str["Case_Status_" + _Case.CaseStatusID.ToString()]
                    </div>
                    
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(CaseModel.CaseResult) HeaderText="@Localizer.Str["Cases_List_Ergebnis"]" Width="100">
            <Template>
                @{
                    var _Case = (context as CaseModel);
                    <div>
                        @Localizer.Str["Case_Result_" + _Case.CaseResultID.ToString()]
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(CaseModel.CustomerName) HeaderText="@Localizer.Str["Cases_List_GeprufterName"]" Width="190" ></GridColumn>
        <GridColumn Field=@nameof(CaseModel.CreateDate) HeaderText="@Localizer.Str["Cases_List_CreateOn"]" Width="150" ></GridColumn>        
        <GridColumn Field=@nameof(CaseModel.LastActivity) HeaderText="@Localizer.Str["Cases_List_LastModify"]" Width="150" HideAtMedia="(min-width: 992px)"></GridColumn>
        <GridColumn Field=@nameof(CaseModel.SapUser) Width="90" HideAtMedia="(min-width: 992px)"></GridColumn>
        @*<GridColumn HeaderText="" Width="40">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat"})"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>*@
    </GridColumns>
</SfGrid>
}

@*@if (showChangeStatusPopUp)
{
    <ChangeStatusPopUp @bind-ShowModal="showChangeStatusPopUp" 
        CaseModel="@CurrentCase" ProfileModel="@ProfileModel" 
        OnFormSaved="OnStatusChanged">
    </ChangeStatusPopUp> 
}*@

<UiMessageBox Data="Messages.List" />


@code {
    [Inject] private IReportsCaseData ReportService { get; set; }
    [Inject] private ILogger<CaseGrid> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private ISyncfusionStringLocalizer SfLocalizer { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private ProtectedSessionStorage  ProtectedSessionStorage { get; set; }
    [Inject] private ICMSProfile ProileService { get; set; }
    [Inject] private ICMSAPI CmsService { get; set; }
    [Inject] private IMapper _mapper { get; set; }

    [Parameter] public CaseFilterModel InputFilter { get; set; }
    [Parameter] public int ContactId { get; set; }
    [Parameter] public string Culture  { get; set; }     
    [Parameter] public EventCallback<int> OnCaseDetailsClicked { get; set; }

    protected SfGrid<CaseModel> CGrid { get; set; }
    protected string GridState;

    protected UiMessages Messages { get; set; }
    protected List<CaseModel> CaseList { get; set; }
    protected CMSProfileModel ProfileModel { get; set; }     
    protected Case CurrentCase { get; set; }
    protected bool showChangeStatusPopUp { get; set; }

    private string[] pageSizes { get; set; }
    private int _loadingStatus;
    private CaseFilterModel _inputFilter;



    protected override void OnInitialized()
    {
        base.OnInitialized();       
        Messages = new UiMessages();
        ProfileModel = new CMSProfileModel();

        SetPageSizeDropDown();

    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        try
        {

            Messages.List.Clear();
            _loadingStatus = 0;
            if (!ObjHelper.JsonCompare(_inputFilter, InputFilter))
            {
                _inputFilter = ObjHelper.Clone(InputFilter);
                await LoadCaseList();
            }
            _loadingStatus = 1;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);
            _loadingStatus = 2;
        }
    }

    public async Task RecordDoubleClickHandler(int caseId)
    {     
        await OnCaseDetailsClicked.InvokeAsync(caseId);
        await ProtectedSessionStorage.SetAsync("CaseId", caseId);

        await JSRuntime.InvokeAsync<object>("open", "/Cases/CaseDetails", "_blank");
    }

    //public async Task StatusChangeHandler(CaseModel currentCase)
    //{
    //    try
    //    {
    //        CurrentCase = await CmsService.LoadCase(currentCase.CaseID);       
    //        ProfileModel = ProileService.Load(currentCase.ProfileID);
    //        showChangeStatusPopUp = true;
    //    }
    //    catch (Exception ex)
    //    {
    //        _logger.LogError(ex.Message);
    //        _logger.LogDebug(ex, ex.Message);
    //        Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);            
    //    }
    
    //}

    //public async Task OnStatusChanged()
    //{
    //    try
    //    {
    //        _loadingStatus = 0;
    //        Messages.List.Clear();
            
    //        await LoadCaseList();

    //        _loadingStatus = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        _logger.LogError(ex.Message);
    //        _logger.LogDebug(ex, ex.Message);
    //        Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);
    //        _loadingStatus = 2;
    //    }
    //}


    private async Task LoadCaseList()
    {

        int? _contactID = InputFilter.ShowOnlyOwnCases ? ContactId : null;

        CaseList = await ReportService.CaseDetail(InputFilter.GateId, InputFilter.CategoryId, _contactID, 
            InputFilter.StatusId, InputFilter.ResultId,
            InputFilter.CreateFromDate, InputFilter.CreateToDate, InputFilter.ModifyFromDate, InputFilter.ModifyToDate, 
            InputFilter.CaseId, InputFilter.ProfilId, InputFilter.SearchedName);

    }

    private void SetPageSizeDropDown()
    {
        List<string> pageList = new List<string>();
        pageList.Add(@SfLocalizer.GetText("Pager_All"));
        pageList.Add("10");
        pageList.Add("20");
        pageList.Add("50");
        pageList.Add("100");
        pageSizes = pageList.ToArray();
    }
}
