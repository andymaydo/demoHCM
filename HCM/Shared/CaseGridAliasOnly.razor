@using HCMApi;
@using HCMDataAccess;
@using HCMModels;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns



<div class="blue_bg"></div>
<h4>@Localizer.Str["Cases_ListCases_withAlias"]</h4>

<SfGrid DataSource="@CaseList" AllowPaging="true" AllowResizing="false" AllowTextWrap="true"  AllowSorting="true" Locale="@Culture">
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings> 
    <GridPageSettings PageSizes="true" ></GridPageSettings>
    <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="CaseModel"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(CaseModel.CaseID) HeaderText="@Localizer.Str["Cases_List_CaseID"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="90"></GridColumn>
        <GridColumn Field=@nameof(CaseModel.ProfileName) HeaderText="@Localizer.Str["Label_Filter_ProfileID"]" ></GridColumn>
        @*<GridColumn Field=@nameof(CaseModel.Subject) HeaderText="@Localizer.Str["Cases_List_Subject"]" ></GridColumn>*@
        <GridColumn Field=@nameof(CaseModel.CaseType) HeaderText="@Localizer.Str["Cases_List_Category"]" ></GridColumn>
       @* <GridColumn Field=@nameof(CaseModel.CaseStatus) HeaderText="@Localizer.Str["Cases_List_Status"]" >
            <Template>
                @{
                    var _Case = (context as CaseModel);
                    <div>
                        @Localizer.Str["Case_Status_" + _Case.CaseStatusID.ToString()]
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(CaseModel.CaseResult) HeaderText="@Localizer.Str["Cases_List_Ergebnis"]">
            <Template>
                @{
                    var _Case = (context as CaseModel);
                    <div>
                        @Localizer.Str["Case_Result_" + _Case.CaseResultID.ToString()]
                    </div>
                }
            </Template>
        </GridColumn>*@
        <GridColumn Field=@nameof(CaseModel.CustomerName) HeaderText="@Localizer.Str["Cases_List_AliasName"]" ></GridColumn>
        <GridColumn Field=@nameof(CaseModel.CreateDate) HeaderText="@Localizer.Str["Cases_List_CreateOn"]" ></GridColumn>  
        
        <GridColumn Field=@nameof(CaseModel.ContactName) HeaderText="@Localizer.Str["Cases_List_Contact"]" ></GridColumn>
        
        @*<GridColumn Field=@nameof(CaseModel.LastActivity) HeaderText="@Localizer.Str["Cases_List_LastModify"]" ></GridColumn>
        <GridColumn Field=@nameof(CaseModel.SapUser)></GridColumn>*@
        @*<GridColumn HeaderText="" Width="40">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat"})"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>*@
    </GridColumns>
</SfGrid>

<div class="pt-3">
    <UiMessageBox Data="Messages.List" />
</div>

@code {
    [Inject] private IReportsCaseData ReportService { get; set; }
    [Inject] private ILogger<CaseGrid> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }

    [Parameter] public CaseFilterModel InputFilter { get; set; }
    [Parameter] public int ContactId { get; set; }
    [Parameter] public string Culture  { get; set; }     
    [Parameter] public EventCallback<int> OnCaseDetailsClicked { get; set; }

    protected UiMessages Messages { get; set; }
    protected List<CaseModel> CaseList { get; set; }

    private CaseFilterModel _inputFilter;

    protected override void OnInitialized()
    {
        base.OnInitialized();       
        Messages = new UiMessages();
        //_inputFilter = ObjHelper.Clone(InputFilter);
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        try
        {

            Messages.List.Clear();
            if (!ObjHelper.JsonCompare(_inputFilter, InputFilter))
            {
                _inputFilter = ObjHelper.Clone(InputFilter);
                await LoadCaseList();
            }

        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);
        }
    }

    public async Task RecordDoubleClickHandler(RecordDoubleClickEventArgs<CaseModel> args)
    {     
        await OnCaseDetailsClicked.InvokeAsync(args.RowData.CaseID);
    }

    private async Task LoadCaseList()
    {

        int? _contactID = InputFilter.ShowOnlyOwnCases ? ContactId : null;
        
        CaseList = await ReportService.AliasDetail(InputFilter.GateId, InputFilter.CategoryId, _contactID, 
                InputFilter.StatusId, InputFilter.ResultId,
                InputFilter.CreateFromDate, InputFilter.CreateToDate, InputFilter.ModifyFromDate, InputFilter.ModifyToDate,
                InputFilter.CaseId, InputFilter.ProfilId, InputFilter.SearchedName);
    }
}
