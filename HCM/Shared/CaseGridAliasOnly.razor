@using HCMApi;
@using HCMDataAccess;
@using HCMModels;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns



<div class="blue_bg"></div>
<h5>@Localizer.Str["Cases_ListCases_withAlias"]</h5>

<SfGrid DataSource="@CaseList" AllowPaging="true" AllowResizing="false" AllowTextWrap="true"  AllowSorting="true" Locale="@Culture">
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings> 
    <GridPageSettings PageSizes="@pageSizes" PageSize="20"></GridPageSettings>
    @*<GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="CaseModel"></GridEvents>*@
    <GridColumns>
        <GridColumn Field=@nameof(CaseModel.CaseID) HeaderText="@Localizer.Str["Cases_List_CaseID"]" HeaderTextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left" Width="90">
            <Template>
                @{
                    var _Case = (context as CaseModel);
                    <div>                            
                            <a href="" @onclick="@(() => RecordDoubleClickHandler(_Case.CaseID))" @onclick:preventDefault><span class="oi oi-zoom-in"></span> @_Case.CaseID</a>
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(CaseModel.ProfileName) HeaderText="@Localizer.Str["Label_Filter_ProfileID"]" Width="130"></GridColumn>
     
        <GridColumn Field=@nameof(CaseModel.CustomerName) HeaderText="@Localizer.Str["Cases_List_AliasName"]" Width="250"></GridColumn>
        <GridColumn Field=@nameof(CaseModel.CreateDate) HeaderText="@Localizer.Str["Cases_List_CreateOn"]" Width="150"></GridColumn>  
        
        <GridColumn Field=@nameof(CaseModel.ContactName) HeaderText="@Localizer.Str["Cases_List_Contact"]" Width="150"></GridColumn>
        
    </GridColumns>
</SfGrid>


<UiMessageBox Data="Messages.List" />


@code {
    [Inject] private IReportsCaseData ReportService { get; set; }
    [Inject] private ILogger<CaseGrid> _logger { get; set; }
    [Inject] private CommonLocalizationService Localizer { get; set; }
    [Inject] private ISyncfusionStringLocalizer SfLocalizer { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private ProtectedSessionStorage  ProtectedSessionStorage { get; set; }

    [Parameter] public CaseFilterModel InputFilter { get; set; }
    [Parameter] public int ContactId { get; set; }
    [Parameter] public string Culture  { get; set; }     
    [Parameter] public EventCallback<int> OnCaseDetailsClicked { get; set; }

    protected UiMessages Messages { get; set; }
    protected List<CaseModel> CaseList { get; set; }

    private CaseFilterModel _inputFilter;
    private string[] pageSizes { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();       
        Messages = new UiMessages();
        SetPageSizeDropDown();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        try
        {

            Messages.List.Clear();
            if (!ObjHelper.JsonCompare(_inputFilter, InputFilter))
            {
                _inputFilter = ObjHelper.Clone(InputFilter);
                await LoadCaseList();
            }

        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
            _logger.LogDebug(ex, ex.Message);
            Messages.AddError(@Localizer.Str["MsgPanel_Error_Title"],ex.Message, showDetail: true);
        }
    }

    public async Task RecordDoubleClickHandler(int caseId)
    {     
        await OnCaseDetailsClicked.InvokeAsync(caseId);
        await ProtectedSessionStorage.SetAsync("CaseId", caseId);

        await JSRuntime.InvokeAsync<object>("open", "/Cases/CaseDetails", "_blank");
    }

    private async Task LoadCaseList()
    {

        int? _contactID = InputFilter.ShowOnlyOwnCases ? ContactId : null;
        
        CaseList = await ReportService.AliasDetail(InputFilter.GateId, InputFilter.CategoryId, _contactID, 
                InputFilter.StatusId, InputFilter.ResultId,
                InputFilter.CreateFromDate, InputFilter.CreateToDate, InputFilter.ModifyFromDate, InputFilter.ModifyToDate,
                InputFilter.CaseId, InputFilter.ProfilId, InputFilter.SearchedName);
    }
    
    private void SetPageSizeDropDown()
    {
        List<string> pageList = new List<string>();
        pageList.Add(@SfLocalizer.GetText("Pager_All"));
        pageList.Add("10");
        pageList.Add("20");
        pageList.Add("50");
        pageList.Add("100");
        pageSizes = pageList.ToArray();
    }
}
